
MCP401X-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800292c  0800292c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002930  08002930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002940  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001280c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002381  00000000  00000000  00032848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00034bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00035748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218c1  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001480a  00000000  00000000  00057b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b92  00000000  00000000  0006c383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd8  00000000  00000000  00135f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000d26c  00000000  00000000  00137d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080028c0 	.word	0x080028c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080028c0 	.word	0x080028c0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2400      	movs	r4, #0
 80004d6:	9405      	str	r4, [sp, #20]
 80004d8:	9406      	str	r4, [sp, #24]
 80004da:	9407      	str	r4, [sp, #28]
 80004dc:	9408      	str	r4, [sp, #32]
 80004de:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_GPIO_Init+0x84>)
 80004e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e4:	f042 0204 	orr.w	r2, r2, #4
 80004e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80004ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ec:	f002 0204 	and.w	r2, r2, #4
 80004f0:	9201      	str	r2, [sp, #4]
 80004f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000502:	9202      	str	r2, [sp, #8]
 8000504:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f042 0201 	orr.w	r2, r2, #1
 800050c:	64da      	str	r2, [r3, #76]	; 0x4c
 800050e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000510:	f002 0201 	and.w	r2, r2, #1
 8000514:	9203      	str	r2, [sp, #12]
 8000516:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051a:	f042 0202 	orr.w	r2, r2, #2
 800051e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800052a:	4d0b      	ldr	r5, [pc, #44]	; (8000558 <MX_GPIO_Init+0x88>)
 800052c:	4622      	mov	r2, r4
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4628      	mov	r0, r5
 8000534:	f000 fb92 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000546:	a905      	add	r1, sp, #20
 8000548:	4628      	mov	r0, r5
 800054a:	f000 faad 	bl	8000aa8 <HAL_GPIO_Init>

}
 800054e:	b00b      	add	sp, #44	; 0x2c
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000400 	.word	0x48000400

0800055c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800055c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055e:	4812      	ldr	r0, [pc, #72]	; (80005a8 <MX_I2C1_Init+0x4c>)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_I2C1_Init+0x50>)
 8000562:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x54>)
 8000566:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056c:	2201      	movs	r2, #1
 800056e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000570:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000572:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000574:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000576:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000578:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800057a:	f000 fd17 	bl	8000fac <HAL_I2C_Init>
 800057e:	b950      	cbnz	r0, 8000596 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000580:	2100      	movs	r1, #0
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <MX_I2C1_Init+0x4c>)
 8000584:	f000 fef8 	bl	8001378 <HAL_I2CEx_ConfigAnalogFilter>
 8000588:	b940      	cbnz	r0, 800059c <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800058a:	2100      	movs	r1, #0
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_I2C1_Init+0x4c>)
 800058e:	f000 ff21 	bl	80013d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000592:	b930      	cbnz	r0, 80005a2 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000594:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000596:	f000 f8c9 	bl	800072c <Error_Handler>
 800059a:	e7f1      	b.n	8000580 <MX_I2C1_Init+0x24>
    Error_Handler();
 800059c:	f000 f8c6 	bl	800072c <Error_Handler>
 80005a0:	e7f3      	b.n	800058a <MX_I2C1_Init+0x2e>
    Error_Handler();
 80005a2:	f000 f8c3 	bl	800072c <Error_Handler>
}
 80005a6:	e7f5      	b.n	8000594 <MX_I2C1_Init+0x38>
 80005a8:	20000028 	.word	0x20000028
 80005ac:	40005400 	.word	0x40005400
 80005b0:	10909cec 	.word	0x10909cec

080005b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005b4:	b510      	push	{r4, lr}
 80005b6:	b0a0      	sub	sp, #128	; 0x80
 80005b8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	2100      	movs	r1, #0
 80005bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80005be:	911c      	str	r1, [sp, #112]	; 0x70
 80005c0:	911d      	str	r1, [sp, #116]	; 0x74
 80005c2:	911e      	str	r1, [sp, #120]	; 0x78
 80005c4:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	2260      	movs	r2, #96	; 0x60
 80005c8:	a803      	add	r0, sp, #12
 80005ca:	f002 f971 	bl	80028b0 <memset>
  if(i2cHandle->Instance==I2C1)
 80005ce:	6822      	ldr	r2, [r4, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d001      	beq.n	80005da <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005d6:	b020      	add	sp, #128	; 0x80
 80005d8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	a803      	add	r0, sp, #12
 80005e0:	f001 fcee 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 80005e4:	bb10      	cbnz	r0, 800062c <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4c14      	ldr	r4, [pc, #80]	; (8000638 <HAL_I2C_MspInit+0x84>)
 80005e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80005f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005fe:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000600:	2312      	movs	r3, #18
 8000602:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000604:	2301      	movs	r3, #1
 8000606:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800060c:	2304      	movs	r3, #4
 800060e:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	a91b      	add	r1, sp, #108	; 0x6c
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <HAL_I2C_MspInit+0x88>)
 8000614:	f000 fa48 	bl	8000aa8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800061a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	9b02      	ldr	r3, [sp, #8]
}
 800062a:	e7d4      	b.n	80005d6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800062c:	f000 f87e 	bl	800072c <Error_Handler>
 8000630:	e7d9      	b.n	80005e6 <HAL_I2C_MspInit+0x32>
 8000632:	bf00      	nop
 8000634:	40005400 	.word	0x40005400
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400

08000640 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000640:	b500      	push	{lr}
 8000642:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000644:	2244      	movs	r2, #68	; 0x44
 8000646:	2100      	movs	r1, #0
 8000648:	a805      	add	r0, sp, #20
 800064a:	f002 f931 	bl	80028b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	9303      	str	r3, [sp, #12]
 8000658:	9304      	str	r3, [sp, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f000 feed 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 8000662:	bb20      	cbnz	r0, 80006ae <SystemClock_Config+0x6e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066c:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2210      	movs	r2, #16
 8000670:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2201      	movs	r2, #1
 8000678:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	220a      	movs	r2, #10
 800067c:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067e:	2207      	movs	r2, #7
 8000680:	9213      	str	r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	a805      	add	r0, sp, #20
 8000688:	f000 ffba 	bl	8001600 <HAL_RCC_OscConfig>
 800068c:	b988      	cbnz	r0, 80006b2 <SystemClock_Config+0x72>
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	9300      	str	r3, [sp, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	9304      	str	r3, [sp, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	2104      	movs	r1, #4
 80006a0:	4668      	mov	r0, sp
 80006a2:	f001 faed 	bl	8001c80 <HAL_RCC_ClockConfig>
 80006a6:	b930      	cbnz	r0, 80006b6 <SystemClock_Config+0x76>
	{
		Error_Handler();
	}
}
 80006a8:	b017      	add	sp, #92	; 0x5c
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ae:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006b0:	e7fe      	b.n	80006b0 <SystemClock_Config+0x70>
 80006b2:	b672      	cpsid	i
 80006b4:	e7fe      	b.n	80006b4 <SystemClock_Config+0x74>
 80006b6:	b672      	cpsid	i
 80006b8:	e7fe      	b.n	80006b8 <SystemClock_Config+0x78>
	...

080006bc <main>:
{
 80006bc:	b500      	push	{lr}
 80006be:	b083      	sub	sp, #12
	HAL_Init();
 80006c0:	f000 f96e 	bl	80009a0 <HAL_Init>
	SystemClock_Config();
 80006c4:	f7ff ffbc 	bl	8000640 <SystemClock_Config>
	MX_GPIO_Init();
 80006c8:	f7ff ff02 	bl	80004d0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006cc:	f000 f8b6 	bl	800083c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80006d0:	f7ff ff44 	bl	800055c <MX_I2C1_Init>
	uint8_t stepBuf[3] = {0, 64, 127};
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <main+0x6c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	f88d 3006 	strb.w	r3, [sp, #6]
	SetStep(&stepBuf[0]);
 80006e2:	a801      	add	r0, sp, #4
 80006e4:	f000 f824 	bl	8000730 <SetStep>
	step = ReadStep();
 80006e8:	f000 f832 	bl	8000750 <ReadStep>
	SetStep(&stepBuf[1]);
 80006ec:	f10d 0005 	add.w	r0, sp, #5
 80006f0:	f000 f81e 	bl	8000730 <SetStep>
	step = ReadStep();
 80006f4:	f000 f82c 	bl	8000750 <ReadStep>
	SetStep(&stepBuf[2]);
 80006f8:	f10d 0006 	add.w	r0, sp, #6
 80006fc:	f000 f818 	bl	8000730 <SetStep>
	step = ReadStep();
 8000700:	f000 f826 	bl	8000750 <ReadStep>
	SetResistance(2500);			//Set Resistance value 2.5K
 8000704:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000708:	f000 f838 	bl	800077c <SetResistance>
	step = ReadStep();				//Read the step value
 800070c:	f000 f820 	bl	8000750 <ReadStep>
	Rwb = ReadResistance();			//Read the Resistance value from chip
 8000710:	f000 f854 	bl	80007bc <ReadResistance>
	SetResistance(7800);			//Set Resistance value 7.8K
 8000714:	f641 6078 	movw	r0, #7800	; 0x1e78
 8000718:	f000 f830 	bl	800077c <SetResistance>
	step = ReadStep();
 800071c:	f000 f818 	bl	8000750 <ReadStep>
	Rwb = ReadResistance();
 8000720:	f000 f84c 	bl	80007bc <ReadResistance>
	while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x68>
 8000726:	bf00      	nop
 8000728:	080028d8 	.word	0x080028d8

0800072c <Error_Handler>:
 800072c:	b672      	cpsid	i
	while (1)
 800072e:	e7fe      	b.n	800072e <Error_Handler+0x2>

08000730 <SetStep>:
/**
  * @brief  Set step value. Range 0 - 127
  * @retval None
  */
void SetStep(uint8_t *step)
{
 8000730:	b500      	push	{lr}
 8000732:	b083      	sub	sp, #12
 8000734:	4602      	mov	r2, r0
	HAL_I2C_Master_Transmit(&hi2c1, MCP401XADDR, step, 1, HAL_MAX_DELAY);
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	215e      	movs	r1, #94	; 0x5e
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <SetStep+0x1c>)
 8000742:	f000 fc8d 	bl	8001060 <HAL_I2C_Master_Transmit>
}
 8000746:	b003      	add	sp, #12
 8000748:	f85d fb04 	ldr.w	pc, [sp], #4
 800074c:	20000028 	.word	0x20000028

08000750 <ReadStep>:
/**
  * @brief  Read step value. Range 0 - 127
  * @retval int
  */
int ReadStep(void)
{
 8000750:	b500      	push	{lr}
 8000752:	b085      	sub	sp, #20
	uint8_t tempBuf[1] = {0};
 8000754:	2300      	movs	r3, #0
 8000756:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Receive(&hi2c1, MCP401XADDR, tempBuf, 1, HAL_MAX_DELAY);
 800075a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	aa03      	add	r2, sp, #12
 8000764:	215e      	movs	r1, #94	; 0x5e
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <ReadStep+0x28>)
 8000768:	f000 fd40 	bl	80011ec <HAL_I2C_Master_Receive>
	return *tempBuf;
}
 800076c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000770:	b005      	add	sp, #20
 8000772:	f85d fb04 	ldr.w	pc, [sp], #4
 8000776:	bf00      	nop
 8000778:	20000028 	.word	0x20000028

0800077c <SetResistance>:
/**
  * @brief  Set Resistance value, Rwb.
  * @retval None
  */
void SetResistance(uint32_t Rwb)
{
 800077c:	b500      	push	{lr}
 800077e:	b083      	sub	sp, #12
	uint8_t step = (((MAXSTEP * Rwb) / MAXRESISTANCE) + (Rwb / 1000));;
 8000780:	ebc0 13c0 	rsb	r3, r0, r0, lsl #7
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <SetResistance+0x38>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <SetResistance+0x3c>)
 800078c:	fba2 2000 	umull	r2, r0, r2, r0
 8000790:	0980      	lsrs	r0, r0, #6
 8000792:	eb00 3053 	add.w	r0, r0, r3, lsr #13
	if(step > 127)
 8000796:	f010 0f80 	tst.w	r0, #128	; 0x80
 800079a:	bf0c      	ite	eq
 800079c:	b2c3      	uxtbeq	r3, r0
	{
		step = 127;
 800079e:	237f      	movne	r3, #127	; 0x7f
 80007a0:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	SetStep(&step);
 80007a4:	f10d 0007 	add.w	r0, sp, #7
 80007a8:	f7ff ffc2 	bl	8000730 <SetStep>
}
 80007ac:	b003      	add	sp, #12
 80007ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80007b2:	bf00      	nop
 80007b4:	d1b71759 	.word	0xd1b71759
 80007b8:	10624dd3 	.word	0x10624dd3

080007bc <ReadResistance>:
/**
  * @brief  Read Resistance value, Rwb.
  * @retval int
  */
int ReadResistance(void)
{
 80007bc:	b508      	push	{r3, lr}
	uint8_t step = ReadStep();
 80007be:	f7ff ffc7 	bl	8000750 <ReadStep>
	uint32_t Rwb = (1000 * MAXRESISTANCE * step ) / ((1000 * MAXSTEP) + MAXRESISTANCE);;
 80007c2:	b2c0      	uxtb	r0, r0
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <ReadResistance+0x1c>)
 80007c6:	fb00 f303 	mul.w	r3, r0, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <ReadResistance+0x20>)
 80007cc:	fb80 2003 	smull	r2, r0, r0, r3
 80007d0:	17db      	asrs	r3, r3, #31
	return Rwb;
}
 80007d2:	ebc3 30e0 	rsb	r0, r3, r0, asr #15
 80007d6:	bd08      	pop	{r3, pc}
 80007d8:	00989680 	.word	0x00989680
 80007dc:	3d3b1029 	.word	0x3d3b1029

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x2c>)
 80007e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007e6:	f042 0201 	orr.w	r2, r2, #1
 80007ea:	661a      	str	r2, [r3, #96]	; 0x60
 80007ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007ee:	f002 0201 	and.w	r2, r2, #1
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007fc:	659a      	str	r2, [r3, #88]	; 0x58
 80007fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	b002      	add	sp, #8
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler>

08000812 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler>

08000814 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler>

08000816 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler>

08000818 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler>

0800081a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000822:	f000 f8d3 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000826:	bd08      	pop	{r3, pc}

08000828 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <SystemInit+0x10>)
 800082a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800082e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000832:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800083c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x30>)
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x34>)
 8000842:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000844:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000848:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	2300      	movs	r3, #0
 800084c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000850:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000852:	220c      	movs	r2, #12
 8000854:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	f001 ffd1 	bl	8002804 <HAL_UART_Init>
 8000862:	b900      	cbnz	r0, 8000866 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000864:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000866:	f7ff ff61 	bl	800072c <Error_Handler>
}
 800086a:	e7fb      	b.n	8000864 <MX_USART2_UART_Init+0x28>
 800086c:	2000007c 	.word	0x2000007c
 8000870:	40004400 	.word	0x40004400

08000874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000874:	b510      	push	{r4, lr}
 8000876:	b0a0      	sub	sp, #128	; 0x80
 8000878:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	2100      	movs	r1, #0
 800087c:	911b      	str	r1, [sp, #108]	; 0x6c
 800087e:	911c      	str	r1, [sp, #112]	; 0x70
 8000880:	911d      	str	r1, [sp, #116]	; 0x74
 8000882:	911e      	str	r1, [sp, #120]	; 0x78
 8000884:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000886:	2260      	movs	r2, #96	; 0x60
 8000888:	a803      	add	r0, sp, #12
 800088a:	f002 f811 	bl	80028b0 <memset>
  if(uartHandle->Instance==USART2)
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000892:	429a      	cmp	r2, r3
 8000894:	d001      	beq.n	800089a <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000896:	b020      	add	sp, #128	; 0x80
 8000898:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800089a:	2302      	movs	r3, #2
 800089c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089e:	a803      	add	r0, sp, #12
 80008a0:	f001 fb8e 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	bb10      	cbnz	r0, 80008ec <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x84>)
 80008a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ae:	659a      	str	r2, [r3, #88]	; 0x58
 80008b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008b2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80008b6:	9201      	str	r2, [sp, #4]
 80008b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008bc:	f042 0201 	orr.w	r2, r2, #1
 80008c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008cc:	230c      	movs	r3, #12
 80008ce:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008dc:	2307      	movs	r3, #7
 80008de:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	a91b      	add	r1, sp, #108	; 0x6c
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 f8df 	bl	8000aa8 <HAL_GPIO_Init>
}
 80008ea:	e7d4      	b.n	8000896 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80008ec:	f7ff ff1e 	bl	800072c <Error_Handler>
 80008f0:	e7d9      	b.n	80008a6 <HAL_UART_MspInit+0x32>
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40021000 	.word	0x40021000

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ff92 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f001 ff9d 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fec5 	bl	80006bc <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000940:	08002934 	.word	0x08002934
  ldr r2, =_sbss
 8000944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000948:	20000104 	.word	0x20000104

0800094c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_IRQHandler>
	...

08000950 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_InitTick+0x44>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b90b      	cbnz	r3, 800095a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000956:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000958:	4770      	bx	lr
{
 800095a:	b510      	push	{r4, lr}
 800095c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	fbb0 f3f3 	udiv	r3, r0, r3
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_InitTick+0x48>)
 8000968:	6810      	ldr	r0, [r2, #0]
 800096a:	fbb0 f0f3 	udiv	r0, r0, r3
 800096e:	f000 f887 	bl	8000a80 <HAL_SYSTICK_Config>
 8000972:	b968      	cbnz	r0, 8000990 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	2c0f      	cmp	r4, #15
 8000976:	d901      	bls.n	800097c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000978:	2001      	movs	r0, #1
 800097a:	e00a      	b.n	8000992 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	4621      	mov	r1, r4
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	f000 f846 	bl	8000a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_InitTick+0x4c>)
 800098a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2000      	movs	r0, #0
 800098e:	e000      	b.n	8000992 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000990:	2001      	movs	r0, #1
}
 8000992:	bd10      	pop	{r4, pc}
 8000994:	20000004 	.word	0x20000004
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008

080009a0 <HAL_Init>:
{
 80009a0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <HAL_Init+0x28>)
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f81f 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ffcc 	bl	8000950 <HAL_InitTick>
 80009b8:	b110      	cbz	r0, 80009c0 <HAL_Init+0x20>
    status = HAL_ERROR;
 80009ba:	2401      	movs	r4, #1
}
 80009bc:	4620      	mov	r0, r4
 80009be:	bd10      	pop	{r4, pc}
 80009c0:	4604      	mov	r4, r0
    HAL_MspInit();
 80009c2:	f7ff ff0d 	bl	80007e0 <HAL_MspInit>
 80009c6:	e7f9      	b.n	80009bc <HAL_Init+0x1c>
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x10>)
 80009ce:	6811      	ldr	r1, [r2, #0]
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_IncTick+0x14>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	440b      	add	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000100 	.word	0x20000100
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009e4:	4b01      	ldr	r3, [pc, #4]	; (80009ec <HAL_GetTick+0x8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000100 	.word	0x20000100

080009f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	0203      	lsls	r3, r0, #8
 80009f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80009fe:	0412      	lsls	r2, r2, #16
 8000a00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_NVIC_SetPriority+0x64>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1e:	f1c3 0c07 	rsb	ip, r3, #7
 8000a22:	f1bc 0f04 	cmp.w	ip, #4
 8000a26:	bf28      	it	cs
 8000a28:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2c:	f103 0e04 	add.w	lr, r3, #4
 8000a30:	f1be 0f06 	cmp.w	lr, #6
 8000a34:	bf8c      	ite	hi
 8000a36:	3b03      	subhi	r3, #3
 8000a38:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000a3e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a42:	ea21 010c 	bic.w	r1, r1, ip
 8000a46:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	fa0e f303 	lsl.w	r3, lr, r3
 8000a4c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000a52:	2800      	cmp	r0, #0
 8000a54:	db09      	blt.n	8000a6a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	0109      	lsls	r1, r1, #4
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a5e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a62:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a66:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	f000 000f 	and.w	r0, r0, #15
 8000a6e:	0109      	lsls	r1, r1, #4
 8000a70:	b2c9      	uxtb	r1, r1
 8000a72:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_NVIC_SetPriority+0x68>)
 8000a74:	5419      	strb	r1, [r3, r0]
 8000a76:	e7f6      	b.n	8000a66 <HAL_NVIC_SetPriority+0x52>
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	e000ed14 	.word	0xe000ed14

08000a80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	3801      	subs	r0, #1
 8000a82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a86:	d20b      	bcs.n	8000aa0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a8c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <HAL_SYSTICK_Config+0x24>)
 8000a90:	21f0      	movs	r1, #240	; 0xf0
 8000a92:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a96:	2000      	movs	r0, #0
 8000a98:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aa0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa8:	680b      	ldr	r3, [r1, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80cf 	beq.w	8000c4e <HAL_GPIO_Init+0x1a6>
{
 8000ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8000aba:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000abc:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000abe:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac2:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ac6:	4c62      	ldr	r4, [pc, #392]	; (8000c50 <HAL_GPIO_Init+0x1a8>)
 8000ac8:	e048      	b.n	8000b5c <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 8000aca:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000acc:	fa0e fa0c 	lsl.w	sl, lr, ip
 8000ad0:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad4:	68cb      	ldr	r3, [r1, #12]
 8000ad6:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ada:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8000ade:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ae0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ae2:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae6:	684b      	ldr	r3, [r1, #4]
 8000ae8:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8000aec:	4097      	lsls	r7, r2
 8000aee:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000af2:	6047      	str	r7, [r0, #4]
 8000af4:	e03d      	b.n	8000b72 <HAL_GPIO_Init+0xca>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af6:	2700      	movs	r7, #0
 8000af8:	fa07 f70b 	lsl.w	r7, r7, fp
 8000afc:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b00:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8000b02:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 8000b04:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b08:	684e      	ldr	r6, [r1, #4]
 8000b0a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000b0e:	bf0c      	ite	eq
 8000b10:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000b12:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8000b16:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 8000b18:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b1a:	684e      	ldr	r6, [r1, #4]
 8000b1c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000b20:	bf0c      	ite	eq
 8000b22:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000b24:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8000b28:	60e3      	str	r3, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b2a:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b2c:	684e      	ldr	r6, [r1, #4]
 8000b2e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000b32:	bf0c      	ite	eq
 8000b34:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000b36:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8000b3a:	6063      	str	r3, [r4, #4]

        temp = EXTI->IMR1;
 8000b3c:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b3e:	684e      	ldr	r6, [r1, #4]
 8000b40:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000b44:	bf0c      	ite	eq
 8000b46:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8000b48:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8000b4c:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8000b4e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b50:	680b      	ldr	r3, [r1, #0]
 8000b52:	f10c 0c02 	add.w	ip, ip, #2
 8000b56:	fa33 f602 	lsrs.w	r6, r3, r2
 8000b5a:	d075      	beq.n	8000c48 <HAL_GPIO_Init+0x1a0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b5c:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8000b60:	ea17 0903 	ands.w	r9, r7, r3
 8000b64:	d0f3      	beq.n	8000b4e <HAL_GPIO_Init+0xa6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b66:	684b      	ldr	r3, [r1, #4]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d9ab      	bls.n	8000aca <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	684b      	ldr	r3, [r1, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d020      	beq.n	8000bbe <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000b7c:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b7e:	fa0e f70c 	lsl.w	r7, lr, ip
 8000b82:	ea23 0707 	bic.w	r7, r3, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b86:	688b      	ldr	r3, [r1, #8]
 8000b88:	fa03 f30c 	lsl.w	r3, r3, ip
 8000b8c:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8000b8e:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b90:	684b      	ldr	r3, [r1, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d111      	bne.n	8000bbe <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3u];
 8000b9a:	08d7      	lsrs	r7, r2, #3
 8000b9c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba2:	f002 0b07 	and.w	fp, r2, #7
 8000ba6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000baa:	fa08 fa0b 	lsl.w	sl, r8, fp
 8000bae:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb2:	690b      	ldr	r3, [r1, #16]
 8000bb4:	fa03 f30b 	lsl.w	r3, r3, fp
 8000bb8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8000bbc:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8000bbe:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc0:	fa0e f70c 	lsl.w	r7, lr, ip
 8000bc4:	ea23 0707 	bic.w	r7, r3, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bc8:	684b      	ldr	r3, [r1, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	fa03 f30c 	lsl.w	r3, r3, ip
 8000bd2:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8000bd4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	684b      	ldr	r3, [r1, #4]
 8000bd8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000bdc:	d0b7      	beq.n	8000b4e <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4e1d      	ldr	r6, [pc, #116]	; (8000c54 <HAL_GPIO_Init+0x1ac>)
 8000be0:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6633      	str	r3, [r6, #96]	; 0x60
 8000be8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf2:	f022 0303 	bic.w	r3, r2, #3
 8000bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bfa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000bfe:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c00:	f002 0b03 	and.w	fp, r2, #3
 8000c04:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c08:	fa08 fa0b 	lsl.w	sl, r8, fp
 8000c0c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c10:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000c14:	f43f af6f 	beq.w	8000af6 <HAL_GPIO_Init+0x4e>
 8000c18:	4e0f      	ldr	r6, [pc, #60]	; (8000c58 <HAL_GPIO_Init+0x1b0>)
 8000c1a:	42b0      	cmp	r0, r6
 8000c1c:	d00e      	beq.n	8000c3c <HAL_GPIO_Init+0x194>
 8000c1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c22:	42b0      	cmp	r0, r6
 8000c24:	d00c      	beq.n	8000c40 <HAL_GPIO_Init+0x198>
 8000c26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c2a:	42b0      	cmp	r0, r6
 8000c2c:	d00a      	beq.n	8000c44 <HAL_GPIO_Init+0x19c>
 8000c2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c32:	42b0      	cmp	r0, r6
 8000c34:	bf0c      	ite	eq
 8000c36:	2704      	moveq	r7, #4
 8000c38:	2707      	movne	r7, #7
 8000c3a:	e75d      	b.n	8000af8 <HAL_GPIO_Init+0x50>
 8000c3c:	462f      	mov	r7, r5
 8000c3e:	e75b      	b.n	8000af8 <HAL_GPIO_Init+0x50>
 8000c40:	2702      	movs	r7, #2
 8000c42:	e759      	b.n	8000af8 <HAL_GPIO_Init+0x50>
 8000c44:	4677      	mov	r7, lr
 8000c46:	e757      	b.n	8000af8 <HAL_GPIO_Init+0x50>
  }
}
 8000c48:	b003      	add	sp, #12
 8000c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4e:	4770      	bx	lr
 8000c50:	40010400 	.word	0x40010400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	b10a      	cbz	r2, 8000c62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c5e:	6181      	str	r1, [r0, #24]
 8000c60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c62:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000c64:	4770      	bx	lr

08000c66 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000c66:	6803      	ldr	r3, [r0, #0]
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 8000c6e:	bf1c      	itt	ne
 8000c70:	2200      	movne	r2, #0
 8000c72:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000c74:	6803      	ldr	r3, [r0, #0]
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	f012 0f01 	tst.w	r2, #1
 8000c7c:	d103      	bne.n	8000c86 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  }
}
 8000c86:	4770      	bx	lr

08000c88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000c88:	b430      	push	{r4, r5}
 8000c8a:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000c8c:	6805      	ldr	r5, [r0, #0]
 8000c8e:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000c90:	4323      	orrs	r3, r4
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8000ca0:	0d64      	lsrs	r4, r4, #21
 8000ca2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000ca6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000caa:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000cae:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000cb2:	f044 0403 	orr.w	r4, r4, #3
 8000cb6:	ea20 0404 	bic.w	r4, r0, r4
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000cbe:	bc30      	pop	{r4, r5}
 8000cc0:	4770      	bx	lr

08000cc2 <I2C_IsErrorOccurred>:
{
 8000cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc6:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000ccc:	f017 0710 	ands.w	r7, r7, #16
 8000cd0:	d051      	beq.n	8000d76 <I2C_IsErrorOccurred+0xb4>
 8000cd2:	460e      	mov	r6, r1
 8000cd4:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8000cda:	2500      	movs	r5, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8000cdc:	f04f 0920 	mov.w	r9, #32
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ce0:	462f      	mov	r7, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000ce2:	6821      	ldr	r1, [r4, #0]
 8000ce4:	698b      	ldr	r3, [r1, #24]
 8000ce6:	f013 0f20 	tst.w	r3, #32
 8000cea:	d13d      	bne.n	8000d68 <I2C_IsErrorOccurred+0xa6>
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d139      	bne.n	8000d64 <I2C_IsErrorOccurred+0xa2>
      if (Timeout != HAL_MAX_DELAY)
 8000cf0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8000cf4:	d0f6      	beq.n	8000ce4 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000cf6:	f7ff fe75 	bl	80009e4 <HAL_GetTick>
 8000cfa:	eba0 0008 	sub.w	r0, r0, r8
 8000cfe:	42b0      	cmp	r0, r6
 8000d00:	d801      	bhi.n	8000d06 <I2C_IsErrorOccurred+0x44>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d1ed      	bne.n	8000ce2 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8000d0a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8000d0e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000d10:	6991      	ldr	r1, [r2, #24]
 8000d12:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8000d16:	d004      	beq.n	8000d22 <I2C_IsErrorOccurred+0x60>
 8000d18:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000d1c:	d101      	bne.n	8000d22 <I2C_IsErrorOccurred+0x60>
              (tmp1 != I2C_CR2_STOP) && \
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d118      	bne.n	8000d54 <I2C_IsErrorOccurred+0x92>
              status = HAL_ERROR;
 8000d22:	f04f 0a01 	mov.w	sl, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f013 0f20 	tst.w	r3, #32
 8000d2e:	d1d8      	bne.n	8000ce2 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000d30:	f7ff fe58 	bl	80009e4 <HAL_GetTick>
 8000d34:	eba0 0008 	sub.w	r0, r0, r8
 8000d38:	2819      	cmp	r0, #25
 8000d3a:	d9f4      	bls.n	8000d26 <I2C_IsErrorOccurred+0x64>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8000d44:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8000d4c:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8000d50:	4655      	mov	r5, sl
 8000d52:	e7e8      	b.n	8000d26 <I2C_IsErrorOccurred+0x64>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000d54:	6853      	ldr	r3, [r2, #4]
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8000d5c:	f7ff fe42 	bl	80009e4 <HAL_GetTick>
 8000d60:	4680      	mov	r8, r0
 8000d62:	e7de      	b.n	8000d22 <I2C_IsErrorOccurred+0x60>
    error_code |= HAL_I2C_ERROR_AF;
 8000d64:	2704      	movs	r7, #4
 8000d66:	e007      	b.n	8000d78 <I2C_IsErrorOccurred+0xb6>
    if (status == HAL_OK)
 8000d68:	2d00      	cmp	r5, #0
 8000d6a:	d13f      	bne.n	8000dec <I2C_IsErrorOccurred+0x12a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8000d70:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8000d72:	2501      	movs	r5, #1
 8000d74:	e000      	b.n	8000d78 <I2C_IsErrorOccurred+0xb6>
  HAL_StatusTypeDef status = HAL_OK;
 8000d76:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8000d78:	6822      	ldr	r2, [r4, #0]
 8000d7a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d80:	d005      	beq.n	8000d8e <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_BERR;
 8000d82:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8000d8c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000d8e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000d92:	d02d      	beq.n	8000df0 <I2C_IsErrorOccurred+0x12e>
    error_code |= HAL_I2C_ERROR_OVR;
 8000d94:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000da0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000da4:	d005      	beq.n	8000db2 <I2C_IsErrorOccurred+0xf0>
    error_code |= HAL_I2C_ERROR_ARLO;
 8000da6:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ff57 	bl	8000c66 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	6853      	ldr	r3, [r2, #4]
 8000dbc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000dc0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000dc4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8000dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dd0:	431f      	orrs	r7, r3
 8000dd2:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000de0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000de4:	2501      	movs	r5, #1
}
 8000de6:	4628      	mov	r0, r5
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8000dec:	2704      	movs	r7, #4
 8000dee:	e7c3      	b.n	8000d78 <I2C_IsErrorOccurred+0xb6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000df0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000df4:	d1d7      	bne.n	8000da6 <I2C_IsErrorOccurred+0xe4>
  if (status != HAL_OK)
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0f5      	beq.n	8000de6 <I2C_IsErrorOccurred+0x124>
 8000dfa:	e7da      	b.n	8000db2 <I2C_IsErrorOccurred+0xf0>

08000dfc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	4604      	mov	r4, r0
 8000e00:	460d      	mov	r5, r1
 8000e02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f013 0f02 	tst.w	r3, #2
 8000e0c:	d11d      	bne.n	8000e4a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e0e:	4632      	mov	r2, r6
 8000e10:	4629      	mov	r1, r5
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff ff55 	bl	8000cc2 <I2C_IsErrorOccurred>
 8000e18:	b9c8      	cbnz	r0, 8000e4e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8000e1a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000e1e:	d0f1      	beq.n	8000e04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e20:	f7ff fde0 	bl	80009e4 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	d801      	bhi.n	8000e2e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d1ea      	bne.n	8000e04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	2320      	movs	r3, #32
 8000e38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000e42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
 8000e48:	e000      	b.n	8000e4c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8000e4a:	2000      	movs	r0, #0
}
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	e7fc      	b.n	8000e4c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08000e52 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e56:	4680      	mov	r8, r0
 8000e58:	460f      	mov	r7, r1
 8000e5a:	4616      	mov	r6, r2
 8000e5c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e62:	699c      	ldr	r4, [r3, #24]
 8000e64:	ea37 0204 	bics.w	r2, r7, r4
 8000e68:	bf0c      	ite	eq
 8000e6a:	f04f 0c01 	moveq.w	ip, #1
 8000e6e:	f04f 0c00 	movne.w	ip, #0
 8000e72:	45b4      	cmp	ip, r6
 8000e74:	d11a      	bne.n	8000eac <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8000e76:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000e7a:	d0f2      	beq.n	8000e62 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e7c:	f7ff fdb2 	bl	80009e4 <HAL_GetTick>
 8000e80:	9b06      	ldr	r3, [sp, #24]
 8000e82:	1ac0      	subs	r0, r0, r3
 8000e84:	42a8      	cmp	r0, r5
 8000e86:	d801      	bhi.n	8000e8c <I2C_WaitOnFlagUntilTimeout+0x3a>
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	d1e8      	bne.n	8000e5e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e8c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000ea4:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e000      	b.n	8000eae <I2C_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8000eac:	2000      	movs	r0, #0
}
 8000eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000eb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000eb2:	b570      	push	{r4, r5, r6, lr}
 8000eb4:	4605      	mov	r5, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f013 0f20 	tst.w	r3, #32
 8000ec2:	d11a      	bne.n	8000efa <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ec4:	4632      	mov	r2, r6
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f7ff fefa 	bl	8000cc2 <I2C_IsErrorOccurred>
 8000ece:	b9b0      	cbnz	r0, 8000efe <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ed0:	f7ff fd88 	bl	80009e4 <HAL_GetTick>
 8000ed4:	1b80      	subs	r0, r0, r6
 8000ed6:	42a0      	cmp	r0, r4
 8000ed8:	d801      	bhi.n	8000ede <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d1ed      	bne.n	8000eba <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ede:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000ef2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
}
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000efa:	2000      	movs	r0, #0
 8000efc:	e7fc      	b.n	8000ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8000efe:	2001      	movs	r0, #1
 8000f00:	e7fa      	b.n	8000ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08000f02 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000f02:	b570      	push	{r4, r5, r6, lr}
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f013 0f04 	tst.w	r3, #4
 8000f12:	d147      	bne.n	8000fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f14:	4632      	mov	r2, r6
 8000f16:	4629      	mov	r1, r5
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f7ff fed2 	bl	8000cc2 <I2C_IsErrorOccurred>
 8000f1e:	4601      	mov	r1, r0
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d141      	bne.n	8000fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	f012 0f20 	tst.w	r2, #32
 8000f2c:	d113      	bne.n	8000f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f2e:	f7ff fd59 	bl	80009e4 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d801      	bhi.n	8000f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d1e6      	bne.n	8000f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f44:	2320      	movs	r3, #32
 8000f46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f50:	2101      	movs	r1, #1
}
 8000f52:	4608      	mov	r0, r1
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	f012 0f04 	tst.w	r2, #4
 8000f5c:	d002      	beq.n	8000f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8000f5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d1f6      	bne.n	8000f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	f012 0f10 	tst.w	r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f6a:	bf1d      	ittte	ne
 8000f6c:	2210      	movne	r2, #16
 8000f6e:	61da      	strne	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f70:	2304      	movne	r3, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f72:	2300      	moveq	r3, #0
 8000f74:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000f7c:	6821      	ldr	r1, [r4, #0]
 8000f7e:	684b      	ldr	r3, [r1, #4]
 8000f80:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000f84:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000f88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	e7d6      	b.n	8000f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	e7d4      	b.n	8000f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8000fa8:	2101      	movs	r1, #1
 8000faa:	e7d2      	b.n	8000f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08000fac <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d055      	beq.n	800105c <HAL_I2C_Init+0xb0>
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d045      	beq.n	8001048 <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fbc:	2324      	movs	r3, #36	; 0x24
 8000fbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	6863      	ldr	r3, [r4, #4]
 8000fd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fd4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	6893      	ldr	r3, [r2, #8]
 8000fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fde:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	68a3      	ldr	r3, [r4, #8]
 8000fe8:	bf0c      	ite	eq
 8000fea:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fee:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8000ff2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff4:	68e3      	ldr	r3, [r4, #12]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d02b      	beq.n	8001052 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ffa:	6822      	ldr	r2, [r4, #0]
 8000ffc:	6853      	ldr	r3, [r2, #4]
 8000ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001008:	6822      	ldr	r2, [r4, #0]
 800100a:	68d3      	ldr	r3, [r2, #12]
 800100c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001010:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	6923      	ldr	r3, [r4, #16]
 8001016:	6961      	ldr	r1, [r4, #20]
 8001018:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800101a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800101c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001020:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001022:	6822      	ldr	r2, [r4, #0]
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	6a21      	ldr	r1, [r4, #32]
 8001028:	430b      	orrs	r3, r1
 800102a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001036:	2000      	movs	r0, #0
 8001038:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800103a:	2320      	movs	r3, #32
 800103c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001040:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001042:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001046:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001048:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800104c:	f7ff fab2 	bl	80005b4 <HAL_I2C_MspInit>
 8001050:	e7b4      	b.n	8000fbc <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	e7ce      	b.n	8000ffa <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
}
 800105e:	4770      	bx	lr

08001060 <HAL_I2C_Master_Transmit>:
{
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	460f      	mov	r7, r1
 8001068:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800106a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800106e:	b2c9      	uxtb	r1, r1
 8001070:	2920      	cmp	r1, #32
 8001072:	f040 80ab 	bne.w	80011cc <HAL_I2C_Master_Transmit+0x16c>
 8001076:	4604      	mov	r4, r0
 8001078:	4690      	mov	r8, r2
 800107a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800107c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001080:	2b01      	cmp	r3, #1
 8001082:	f000 80a7 	beq.w	80011d4 <HAL_I2C_Master_Transmit+0x174>
 8001086:	f04f 0a01 	mov.w	sl, #1
 800108a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800108e:	f7ff fca9 	bl	80009e4 <HAL_GetTick>
 8001092:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001094:	9000      	str	r0, [sp, #0]
 8001096:	2319      	movs	r3, #25
 8001098:	4652      	mov	r2, sl
 800109a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff fed7 	bl	8000e52 <I2C_WaitOnFlagUntilTimeout>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	f040 8097 	bne.w	80011d8 <HAL_I2C_Master_Transmit+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010aa:	2321      	movs	r3, #33	; 0x21
 80010ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010b0:	2310      	movs	r3, #16
 80010b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80010ba:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80010be:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010c2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2bff      	cmp	r3, #255	; 0xff
 80010ca:	d914      	bls.n	80010f6 <HAL_I2C_Master_Transmit+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <HAL_I2C_Master_Transmit+0x188>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d8:	4639      	mov	r1, r7
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fdd4 	bl	8000c88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d055      	beq.n	8001194 <HAL_I2C_Master_Transmit+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010e8:	f04f 0800 	mov.w	r8, #0
 80010ec:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010f0:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 80010f4:	e01b      	b.n	800112e <HAL_I2C_Master_Transmit+0xce>
      hi2c->XferSize = hi2c->XferCount;
 80010f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80010f8:	b292      	uxth	r2, r2
 80010fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010fc:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <HAL_I2C_Master_Transmit+0x188>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	4639      	mov	r1, r7
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff fdbd 	bl	8000c88 <I2C_TransferConfig>
 800110e:	e7e7      	b.n	80010e0 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8001110:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001112:	b292      	uxth	r2, r2
 8001114:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001116:	f8cd 8000 	str.w	r8, [sp]
 800111a:	4653      	mov	r3, sl
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	4639      	mov	r1, r7
 8001120:	4620      	mov	r0, r4
 8001122:	f7ff fdb1 	bl	8000c88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001126:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001128:	b29b      	uxth	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d032      	beq.n	8001194 <HAL_I2C_Master_Transmit+0x134>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800112e:	462a      	mov	r2, r5
 8001130:	4631      	mov	r1, r6
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff fe62 	bl	8000dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8001138:	2800      	cmp	r0, #0
 800113a:	d14f      	bne.n	80011dc <HAL_I2C_Master_Transmit+0x17c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001146:	3301      	adds	r3, #1
 8001148:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800114a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800114c:	3b01      	subs	r3, #1
 800114e:	b29b      	uxth	r3, r3
 8001150:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001152:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800115a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800115c:	b292      	uxth	r2, r2
 800115e:	2a00      	cmp	r2, #0
 8001160:	d0e1      	beq.n	8001126 <HAL_I2C_Master_Transmit+0xc6>
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1df      	bne.n	8001126 <HAL_I2C_Master_Transmit+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001166:	9500      	str	r5, [sp, #0]
 8001168:	4633      	mov	r3, r6
 800116a:	4642      	mov	r2, r8
 800116c:	4649      	mov	r1, r9
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff fe6f 	bl	8000e52 <I2C_WaitOnFlagUntilTimeout>
 8001174:	bba0      	cbnz	r0, 80011e0 <HAL_I2C_Master_Transmit+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001176:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001178:	b29b      	uxth	r3, r3
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d9c8      	bls.n	8001110 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001182:	f8cd 8000 	str.w	r8, [sp]
 8001186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118a:	4639      	mov	r1, r7
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff fd7b 	bl	8000c88 <I2C_TransferConfig>
 8001192:	e7c8      	b.n	8001126 <HAL_I2C_Master_Transmit+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	462a      	mov	r2, r5
 8001196:	4631      	mov	r1, r6
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fe8a 	bl	8000eb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800119e:	bb08      	cbnz	r0, 80011e4 <HAL_I2C_Master_Transmit+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011a6:	6821      	ldr	r1, [r4, #0]
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80011ae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80011b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80011bc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80011c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80011ca:	e000      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
    return HAL_BUSY;
 80011cc:	2002      	movs	r0, #2
}
 80011ce:	b002      	add	sp, #8
 80011d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80011d4:	2002      	movs	r0, #2
 80011d6:	e7fa      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
 80011da:	e7f8      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
        return HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
 80011de:	e7f6      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
          return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
 80011e2:	e7f4      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	e7f2      	b.n	80011ce <HAL_I2C_Master_Transmit+0x16e>
 80011e8:	80002000 	.word	0x80002000

080011ec <HAL_I2C_Master_Receive>:
{
 80011ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	460f      	mov	r7, r1
 80011f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	2920      	cmp	r1, #32
 80011fe:	f040 80ab 	bne.w	8001358 <HAL_I2C_Master_Receive+0x16c>
 8001202:	4604      	mov	r4, r0
 8001204:	4690      	mov	r8, r2
 8001206:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8001208:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800120c:	2b01      	cmp	r3, #1
 800120e:	f000 80a7 	beq.w	8001360 <HAL_I2C_Master_Receive+0x174>
 8001212:	f04f 0a01 	mov.w	sl, #1
 8001216:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800121a:	f7ff fbe3 	bl	80009e4 <HAL_GetTick>
 800121e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001220:	9000      	str	r0, [sp, #0]
 8001222:	2319      	movs	r3, #25
 8001224:	4652      	mov	r2, sl
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fe11 	bl	8000e52 <I2C_WaitOnFlagUntilTimeout>
 8001230:	2800      	cmp	r0, #0
 8001232:	f040 8097 	bne.w	8001364 <HAL_I2C_Master_Receive+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001236:	2322      	movs	r3, #34	; 0x22
 8001238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800123c:	2310      	movs	r3, #16
 800123e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001246:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800124a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800124e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d914      	bls.n	8001282 <HAL_I2C_Master_Receive+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	22ff      	movs	r2, #255	; 0xff
 800125a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800125c:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_I2C_Master_Receive+0x188>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001264:	4639      	mov	r1, r7
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fd0e 	bl	8000c88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800126c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d055      	beq.n	8001320 <HAL_I2C_Master_Receive+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001274:	f04f 0800 	mov.w	r8, #0
 8001278:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800127c:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8001280:	e01b      	b.n	80012ba <HAL_I2C_Master_Receive+0xce>
      hi2c->XferSize = hi2c->XferCount;
 8001282:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001284:	b292      	uxth	r2, r2
 8001286:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_I2C_Master_Receive+0x188>)
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	4639      	mov	r1, r7
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fcf7 	bl	8000c88 <I2C_TransferConfig>
 800129a:	e7e7      	b.n	800126c <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 800129c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800129e:	b292      	uxth	r2, r2
 80012a0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012a2:	f8cd 8000 	str.w	r8, [sp]
 80012a6:	4653      	mov	r3, sl
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	4639      	mov	r1, r7
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fceb 	bl	8000c88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d032      	beq.n	8001320 <HAL_I2C_Master_Receive+0x134>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ba:	462a      	mov	r2, r5
 80012bc:	4631      	mov	r1, r6
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff fe1f 	bl	8000f02 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d14f      	bne.n	8001368 <HAL_I2C_Master_Receive+0x17c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80012d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80012d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29b      	uxth	r3, r3
 80012dc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80012e0:	3a01      	subs	r2, #1
 80012e2:	b292      	uxth	r2, r2
 80012e4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80012e8:	b292      	uxth	r2, r2
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d0e1      	beq.n	80012b2 <HAL_I2C_Master_Receive+0xc6>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1df      	bne.n	80012b2 <HAL_I2C_Master_Receive+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012f2:	9500      	str	r5, [sp, #0]
 80012f4:	4633      	mov	r3, r6
 80012f6:	4642      	mov	r2, r8
 80012f8:	4649      	mov	r1, r9
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fda9 	bl	8000e52 <I2C_WaitOnFlagUntilTimeout>
 8001300:	bba0      	cbnz	r0, 800136c <HAL_I2C_Master_Receive+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001304:	b29b      	uxth	r3, r3
 8001306:	2bff      	cmp	r3, #255	; 0xff
 8001308:	d9c8      	bls.n	800129c <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800130e:	f8cd 8000 	str.w	r8, [sp]
 8001312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001316:	4639      	mov	r1, r7
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fcb5 	bl	8000c88 <I2C_TransferConfig>
 800131e:	e7c8      	b.n	80012b2 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001320:	462a      	mov	r2, r5
 8001322:	4631      	mov	r1, r6
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fdc4 	bl	8000eb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800132a:	bb08      	cbnz	r0, 8001370 <HAL_I2C_Master_Receive+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	2220      	movs	r2, #32
 8001330:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001332:	6821      	ldr	r1, [r4, #0]
 8001334:	684b      	ldr	r3, [r1, #4]
 8001336:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800133a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800133e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001348:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001352:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001356:	e000      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
    return HAL_BUSY;
 8001358:	2002      	movs	r0, #2
}
 800135a:	b002      	add	sp, #8
 800135c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001360:	2002      	movs	r0, #2
 8001362:	e7fa      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	e7f8      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
        return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e7f6      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
          return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e7f4      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
 8001372:	e7f2      	b.n	800135a <HAL_I2C_Master_Receive+0x16e>
 8001374:	80002400 	.word	0x80002400

08001378 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001378:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b20      	cmp	r3, #32
 8001380:	d124      	bne.n	80013cc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001382:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001386:	2b01      	cmp	r3, #1
 8001388:	d022      	beq.n	80013d0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800138a:	2301      	movs	r3, #1
 800138c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001390:	2324      	movs	r3, #36	; 0x24
 8001392:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001396:	6802      	ldr	r2, [r0, #0]
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013a0:	6802      	ldr	r2, [r0, #0]
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a8:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	4319      	orrs	r1, r3
 80013b0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013b2:	6802      	ldr	r2, [r0, #0]
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	2320      	movs	r3, #32
 80013be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80013c8:	4618      	mov	r0, r3
 80013ca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80013cc:	2002      	movs	r0, #2
 80013ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80013d0:	2002      	movs	r0, #2
  }
}
 80013d2:	4770      	bx	lr

080013d4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d122      	bne.n	8001424 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d020      	beq.n	8001428 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80013e6:	2301      	movs	r3, #1
 80013e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	2324      	movs	r3, #36	; 0x24
 80013ee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f2:	6802      	ldr	r2, [r0, #0]
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013fc:	6802      	ldr	r2, [r0, #0]
 80013fe:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001404:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001408:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800140a:	6802      	ldr	r2, [r0, #0]
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001414:	2320      	movs	r3, #32
 8001416:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141a:	2300      	movs	r3, #0
 800141c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001420:	4618      	mov	r0, r3
 8001422:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001424:	2002      	movs	r0, #2
 8001426:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001428:	2002      	movs	r0, #2
  }
}
 800142a:	4770      	bx	lr

0800142c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <HAL_PWREx_GetVoltageRange+0xc>)
 800142e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001430:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001440:	d00f      	beq.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d036      	beq.n	80014be <HAL_PWREx_ControlVoltageScaling+0x82>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001450:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800145e:	2000      	movs	r0, #0
 8001460:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800146a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146e:	d024      	beq.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x7e>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2132      	movs	r1, #50	; 0x32
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4910      	ldr	r1, [pc, #64]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x90>)
 800148a:	fba1 1303 	umull	r1, r3, r1, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001492:	6952      	ldr	r2, [r2, #20]
 8001494:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001498:	d007      	beq.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 800149a:	490a      	ldr	r1, [pc, #40]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
        wait_loop_index--;
 800149c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149e:	694a      	ldr	r2, [r1, #20]
 80014a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014a4:	d001      	beq.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f8      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80014ac:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80014ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014b2:	bf0c      	ite	eq
 80014b4:	2000      	moveq	r0, #0
 80014b6:	2003      	movne	r0, #3
 80014b8:	4770      	bx	lr
  return HAL_OK;
 80014ba:	2000      	movs	r0, #0
 80014bc:	4770      	bx	lr
 80014be:	2000      	movs	r0, #0
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014de:	d00c      	beq.n	80014fa <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014e0:	f7ff ffa4 	bl	800142c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80014e8:	d018      	beq.n	800151c <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014ea:	2c80      	cmp	r4, #128	; 0x80
 80014ec:	d81f      	bhi.n	800152e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80014ee:	d02d      	beq.n	800154c <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80014f0:	2c70      	cmp	r4, #112	; 0x70
 80014f2:	bf14      	ite	ne
 80014f4:	2400      	movne	r4, #0
 80014f6:	2401      	moveq	r4, #1
 80014f8:	e01a      	b.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4d15      	ldr	r5, [pc, #84]	; (8001550 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80014fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	65ab      	str	r3, [r5, #88]	; 0x58
 8001504:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800150e:	f7ff ff8d 	bl	800142c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001512:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001518:	65ab      	str	r3, [r5, #88]	; 0x58
 800151a:	e7e3      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800151c:	2c80      	cmp	r4, #128	; 0x80
 800151e:	d904      	bls.n	800152a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001520:	2ca0      	cmp	r4, #160	; 0xa0
 8001522:	bf8c      	ite	hi
 8001524:	2402      	movhi	r4, #2
 8001526:	2401      	movls	r4, #1
 8001528:	e002      	b.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800152a:	2400      	movs	r4, #0
 800152c:	e000      	b.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800152e:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8001532:	680b      	ldr	r3, [r1, #0]
 8001534:	f023 0307 	bic.w	r3, r3, #7
 8001538:	4323      	orrs	r3, r4
 800153a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800153c:	6808      	ldr	r0, [r1, #0]
 800153e:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001542:	1b00      	subs	r0, r0, r4
 8001544:	bf18      	it	ne
 8001546:	2001      	movne	r0, #1
 8001548:	b003      	add	sp, #12
 800154a:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800154c:	2402      	movs	r4, #2
 800154e:	e7ef      	b.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x60>
 8001550:	40021000 	.word	0x40021000
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001558:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800155a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155e:	f013 030c 	ands.w	r3, r3, #12
 8001562:	d00e      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x2a>
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d006      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001568:	2b04      	cmp	r3, #4
 800156a:	d03f      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800156c:	2b08      	cmp	r3, #8
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001570:	bf18      	it	ne
 8001572:	2000      	movne	r0, #0
 8001574:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001576:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800157a:	2a01      	cmp	r2, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800157e:	2000      	movs	r0, #0
 8001580:	e012      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800158c:	bf07      	ittee	eq
 800158e:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8001592:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001596:	6812      	ldrne	r2, [r2, #0]
 8001598:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800159c:	4916      	ldr	r1, [pc, #88]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800159e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a2:	b323      	cbz	r3, 80015ee <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d11f      	bne.n	80015e8 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d017      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80015b4:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	bf08      	it	eq
 80015ba:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015be:	68ca      	ldr	r2, [r1, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015c0:	68cb      	ldr	r3, [r1, #12]
 80015c2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80015c6:	fb00 f303 	mul.w	r3, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015ca:	68c8      	ldr	r0, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80015d0:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015d2:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015d6:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80015da:	3001      	adds	r0, #1
 80015dc:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80015de:	fbb3 f0f0 	udiv	r0, r3, r0
 80015e2:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80015e6:	e7e9      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x64>
 80015e8:	2000      	movs	r0, #0
  return sysclockfreq;
 80015ea:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	007a1200 	.word	0x007a1200
 80015f8:	080028f4 	.word	0x080028f4
 80015fc:	00f42400 	.word	0x00f42400

08001600 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001600:	2800      	cmp	r0, #0
 8001602:	f000 8324 	beq.w	8001c4e <HAL_RCC_OscConfig+0x64e>
{
 8001606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b98      	ldr	r3, [pc, #608]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001610:	689d      	ldr	r5, [r3, #8]
 8001612:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001616:	68de      	ldr	r6, [r3, #12]
 8001618:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800161c:	6803      	ldr	r3, [r0, #0]
 800161e:	f013 0f10 	tst.w	r3, #16
 8001622:	d05f      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001624:	b1f5      	cbz	r5, 8001664 <HAL_RCC_OscConfig+0x64>
 8001626:	2d0c      	cmp	r5, #12
 8001628:	d01a      	beq.n	8001660 <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800162a:	69a3      	ldr	r3, [r4, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80ba 	beq.w	80017a6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8001632:	4a8f      	ldr	r2, [pc, #572]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001634:	6813      	ldr	r3, [r2, #0]
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800163c:	f7ff f9d2 	bl	80009e4 <HAL_GetTick>
 8001640:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001642:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8001870 <HAL_RCC_OscConfig+0x270>
 8001646:	f8d8 3000 	ldr.w	r3, [r8]
 800164a:	f013 0f02 	tst.w	r3, #2
 800164e:	f040 8097 	bne.w	8001780 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001652:	f7ff f9c7 	bl	80009e4 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	2802      	cmp	r0, #2
 800165a:	d9f4      	bls.n	8001646 <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e301      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001660:	2e01      	cmp	r6, #1
 8001662:	d1e2      	bne.n	800162a <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001664:	4b82      	ldr	r3, [pc, #520]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f013 0f02 	tst.w	r3, #2
 800166c:	d003      	beq.n	8001676 <HAL_RCC_OscConfig+0x76>
 800166e:	69a3      	ldr	r3, [r4, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 82ee 	beq.w	8001c52 <HAL_RCC_OscConfig+0x652>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001676:	6a20      	ldr	r0, [r4, #32]
 8001678:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f013 0f08 	tst.w	r3, #8
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001682:	bf12      	itee	ne
 8001684:	681b      	ldrne	r3, [r3, #0]
 8001686:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800168a:	091b      	lsreq	r3, r3, #4
 800168c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001690:	4298      	cmp	r0, r3
 8001692:	d856      	bhi.n	8001742 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f042 0208 	orr.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016a4:	6a21      	ldr	r1, [r4, #32]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	69e1      	ldr	r1, [r4, #28]
 80016ae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80016b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016b6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	2d00      	cmp	r5, #0
 80016ba:	d05a      	beq.n	8001772 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016bc:	f7ff ff4c 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	40d8      	lsrs	r0, r3
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_RCC_OscConfig+0x278>)
 80016d4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x27c>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	f7ff f939 	bl	8000950 <HAL_InitTick>
        if(status != HAL_OK)
 80016de:	2800      	cmp	r0, #0
 80016e0:	f040 82c0 	bne.w	8001c64 <HAL_RCC_OscConfig+0x664>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f013 0f01 	tst.w	r3, #1
 80016ea:	d07d      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ec:	2d08      	cmp	r5, #8
 80016ee:	d072      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1d6>
 80016f0:	2d0c      	cmp	r5, #12
 80016f2:	d06e      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	f000 8094 	beq.w	8001826 <HAL_RCC_OscConfig+0x226>
 80016fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001702:	f000 8096 	beq.w	8001832 <HAL_RCC_OscConfig+0x232>
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001716:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8096 	beq.w	800184c <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 8001720:	f7ff f960 	bl	80009e4 <HAL_GetTick>
 8001724:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001726:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8001870 <HAL_RCC_OscConfig+0x270>
 800172a:	f8d8 3000 	ldr.w	r3, [r8]
 800172e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001732:	d159      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff f956 	bl	80009e4 <HAL_GetTick>
 8001738:	1bc0      	subs	r0, r0, r7
 800173a:	2864      	cmp	r0, #100	; 0x64
 800173c:	d9f5      	bls.n	800172a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e290      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001742:	f7ff fec5 	bl	80014d0 <RCC_SetFlashLatencyFromMSIRange>
 8001746:	2800      	cmp	r0, #0
 8001748:	f040 8285 	bne.w	8001c56 <HAL_RCC_OscConfig+0x656>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f042 0208 	orr.w	r2, r2, #8
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800175c:	6a21      	ldr	r1, [r4, #32]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	69e1      	ldr	r1, [r4, #28]
 8001766:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800176a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e7a4      	b.n	80016bc <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001772:	6a20      	ldr	r0, [r4, #32]
 8001774:	f7ff feac 	bl	80014d0 <RCC_SetFlashLatencyFromMSIRange>
 8001778:	2800      	cmp	r0, #0
 800177a:	d09f      	beq.n	80016bc <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e271      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f042 0208 	orr.w	r2, r2, #8
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001790:	6a21      	ldr	r1, [r4, #32]
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	69e1      	ldr	r1, [r4, #28]
 800179a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800179e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	e79e      	b.n	80016e4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 80017a6:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017b0:	f7ff f918 	bl	80009e4 <HAL_GetTick>
 80017b4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001870 <HAL_RCC_OscConfig+0x270>
 80017ba:	f8d8 3000 	ldr.w	r3, [r8]
 80017be:	f013 0f02 	tst.w	r3, #2
 80017c2:	d08f      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c4:	f7ff f90e 	bl	80009e4 <HAL_GetTick>
 80017c8:	1bc0      	subs	r0, r0, r7
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9f5      	bls.n	80017ba <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 80017ce:	2003      	movs	r0, #3
 80017d0:	e248      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d2:	2e03      	cmp	r6, #3
 80017d4:	d18e      	bne.n	80016f4 <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017de:	d003      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1e8>
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8239 	beq.w	8001c5a <HAL_RCC_OscConfig+0x65a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	f013 0f02 	tst.w	r3, #2
 80017ee:	d05a      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2a6>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f0:	2d04      	cmp	r5, #4
 80017f2:	d047      	beq.n	8001884 <HAL_RCC_OscConfig+0x284>
 80017f4:	2d0c      	cmp	r5, #12
 80017f6:	d043      	beq.n	8001880 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f8:	68e3      	ldr	r3, [r4, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d079      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001808:	f7ff f8ec 	bl	80009e4 <HAL_GetTick>
 800180c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180e:	4f18      	ldr	r7, [pc, #96]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001816:	d163      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff f8e4 	bl	80009e4 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	2802      	cmp	r0, #2
 8001820:	d9f6      	bls.n	8001810 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 8001822:	2003      	movs	r0, #3
 8001824:	e21e      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e772      	b.n	8001718 <HAL_RCC_OscConfig+0x118>
 8001832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001836:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e765      	b.n	8001718 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800184c:	f7ff f8ca 	bl	80009e4 <HAL_GetTick>
 8001850:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001852:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8001870 <HAL_RCC_OscConfig+0x270>
 8001856:	f8d8 3000 	ldr.w	r3, [r8]
 800185a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800185e:	d0c3      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f8c0 	bl	80009e4 <HAL_GetTick>
 8001864:	1bc0      	subs	r0, r0, r7
 8001866:	2864      	cmp	r0, #100	; 0x64
 8001868:	d9f5      	bls.n	8001856 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800186a:	2003      	movs	r0, #3
 800186c:	e1fa      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	080028dc 	.word	0x080028dc
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001880:	2e02      	cmp	r6, #2
 8001882:	d1b9      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001884:	4ba6      	ldr	r3, [pc, #664]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800188c:	d003      	beq.n	8001896 <HAL_RCC_OscConfig+0x296>
 800188e:	68e3      	ldr	r3, [r4, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 81e4 	beq.w	8001c5e <HAL_RCC_OscConfig+0x65e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4aa2      	ldr	r2, [pc, #648]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001898:	6853      	ldr	r3, [r2, #4]
 800189a:	6921      	ldr	r1, [r4, #16]
 800189c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80018a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80018a4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f013 0f08 	tst.w	r3, #8
 80018ac:	d04c      	beq.n	8001948 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	6963      	ldr	r3, [r4, #20]
 80018b0:	b39b      	cbz	r3, 800191a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4a9b      	ldr	r2, [pc, #620]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 80018b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018c0:	f7ff f890 	bl	80009e4 <HAL_GetTick>
 80018c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c6:	4f96      	ldr	r7, [pc, #600]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 80018c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018cc:	f013 0f02 	tst.w	r3, #2
 80018d0:	d13a      	bne.n	8001948 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff f887 	bl	80009e4 <HAL_GetTick>
 80018d6:	1b80      	subs	r0, r0, r6
 80018d8:	2802      	cmp	r0, #2
 80018da:	d9f5      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
          return HAL_TIMEOUT;
 80018dc:	2003      	movs	r0, #3
 80018de:	e1c1      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4a8f      	ldr	r2, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 80018e2:	6853      	ldr	r3, [r2, #4]
 80018e4:	6921      	ldr	r1, [r4, #16]
 80018e6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80018ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80018ee:	6053      	str	r3, [r2, #4]
 80018f0:	e7d9      	b.n	80018a6 <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4a8b      	ldr	r2, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 80018f4:	6813      	ldr	r3, [r2, #0]
 80018f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018fc:	f7ff f872 	bl	80009e4 <HAL_GetTick>
 8001900:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001902:	4f87      	ldr	r7, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800190a:	d0cc      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff f86a 	bl	80009e4 <HAL_GetTick>
 8001910:	1b80      	subs	r0, r0, r6
 8001912:	2802      	cmp	r0, #2
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
 8001918:	e1a4      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_LSI_DISABLE();
 800191a:	4a81      	ldr	r2, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 800191c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001928:	f7ff f85c 	bl	80009e4 <HAL_GetTick>
 800192c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192e:	4f7c      	ldr	r7, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001934:	f013 0f02 	tst.w	r3, #2
 8001938:	d006      	beq.n	8001948 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff f853 	bl	80009e4 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	2802      	cmp	r0, #2
 8001942:	d9f5      	bls.n	8001930 <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 8001944:	2003      	movs	r0, #3
 8001946:	e18d      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f013 0f04 	tst.w	r3, #4
 800194e:	d07e      	beq.n	8001a4e <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001958:	d137      	bne.n	80019ca <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 800195c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800195e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001962:	659a      	str	r2, [r3, #88]	; 0x58
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800196e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x524>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001978:	d029      	beq.n	80019ce <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d03c      	beq.n	80019fa <HAL_RCC_OscConfig+0x3fa>
 8001980:	2b05      	cmp	r3, #5
 8001982:	d042      	beq.n	8001a0a <HAL_RCC_OscConfig+0x40a>
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001986:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001992:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d040      	beq.n	8001a26 <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 80019a4:	f7ff f81e 	bl	80009e4 <HAL_GetTick>
 80019a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019aa:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001b20 <HAL_RCC_OscConfig+0x520>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80019b6:	f013 0f02 	tst.w	r3, #2
 80019ba:	d147      	bne.n	8001a4c <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff f812 	bl	80009e4 <HAL_GetTick>
 80019c0:	1bc0      	subs	r0, r0, r7
 80019c2:	4548      	cmp	r0, r9
 80019c4:	d9f5      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
 80019c8:	e14c      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2600      	movs	r6, #0
 80019cc:	e7d0      	b.n	8001970 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ce:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <HAL_RCC_OscConfig+0x524>)
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019d8:	f7ff f804 	bl	80009e4 <HAL_GetTick>
 80019dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001b24 <HAL_RCC_OscConfig+0x524>
 80019e2:	f8d8 3000 	ldr.w	r3, [r8]
 80019e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019ea:	d1c6      	bne.n	800197a <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7fe fffa 	bl	80009e4 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	2802      	cmp	r0, #2
 80019f4:	d9f5      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
 80019f8:	e134      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fa:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 80019fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a08:	e7c9      	b.n	800199e <HAL_RCC_OscConfig+0x39e>
 8001a0a:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001a0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a10:	f042 0204 	orr.w	r2, r2, #4
 8001a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a24:	e7bb      	b.n	800199e <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8001a26:	f7fe ffdd 	bl	80009e4 <HAL_GetTick>
 8001a2a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001b20 <HAL_RCC_OscConfig+0x520>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8001a38:	f013 0f02 	tst.w	r3, #2
 8001a3c:	d006      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe ffd1 	bl	80009e4 <HAL_GetTick>
 8001a42:	1bc0      	subs	r0, r0, r7
 8001a44:	4548      	cmp	r0, r9
 8001a46:	d9f5      	bls.n	8001a34 <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 8001a48:	2003      	movs	r0, #3
 8001a4a:	e10b      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
    if(pwrclkchanged == SET)
 8001a4c:	b9e6      	cbnz	r6, 8001a88 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f013 0f20 	tst.w	r3, #32
 8001a54:	d035      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a58:	b1e3      	cbz	r3, 8001a94 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001a5c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001a68:	f7fe ffbc 	bl	80009e4 <HAL_GetTick>
 8001a6c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a6e:	4f2c      	ldr	r7, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a74:	f013 0f02 	tst.w	r3, #2
 8001a78:	d123      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7a:	f7fe ffb3 	bl	80009e4 <HAL_GetTick>
 8001a7e:	1b80      	subs	r0, r0, r6
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f5      	bls.n	8001a70 <HAL_RCC_OscConfig+0x470>
          return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e0ed      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001a8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
 8001a92:	e7dc      	b.n	8001a4e <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001a96:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001aa2:	f7fe ff9f 	bl	80009e4 <HAL_GetTick>
 8001aa6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa8:	4f1d      	ldr	r7, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001aaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aae:	f013 0f02 	tst.w	r3, #2
 8001ab2:	d006      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab4:	f7fe ff96 	bl	80009e4 <HAL_GetTick>
 8001ab8:	1b80      	subs	r0, r0, r6
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9f5      	bls.n	8001aaa <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e0d0      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80cc 	beq.w	8001c62 <HAL_RCC_OscConfig+0x662>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d017      	beq.n	8001afe <HAL_RCC_OscConfig+0x4fe>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ace:	2d0c      	cmp	r5, #12
 8001ad0:	f000 80cd 	beq.w	8001c6e <HAL_RCC_OscConfig+0x66e>
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001adc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ade:	f7fe ff81 	bl	80009e4 <HAL_GetTick>
 8001ae2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4d0e      	ldr	r5, [pc, #56]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aec:	f000 80a8 	beq.w	8001c40 <HAL_RCC_OscConfig+0x640>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe ff78 	bl	80009e4 <HAL_GetTick>
 8001af4:	1b00      	subs	r0, r0, r4
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f5      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x4e6>
            return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	e0b2      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
      pll_config = RCC->PLLCFGR;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001b00:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	f003 0103 	and.w	r1, r3, #3
 8001b06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b08:	4291      	cmp	r1, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_OscConfig+0x528>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0c:	2d0c      	cmp	r5, #12
 8001b0e:	f000 80ac 	beq.w	8001c6a <HAL_RCC_OscConfig+0x66a>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b12:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_OscConfig+0x520>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001b1a:	d02f      	beq.n	8001b7c <HAL_RCC_OscConfig+0x57c>
            return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	e0a1      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001b2e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001b34:	d1ea      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001b40:	d1e4      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b48:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001b4c:	d1de      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001b52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b58:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b5c:	d1d6      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b5e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001b62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b68:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001b6c:	d1ce      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b76:	d049      	beq.n	8001c0c <HAL_RCC_OscConfig+0x60c>
  return HAL_OK;
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e073      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
            __HAL_RCC_PLL_DISABLE();
 8001b7c:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001b86:	f7fe ff2d 	bl	80009e4 <HAL_GetTick>
 8001b8a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4e39      	ldr	r6, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001b8e:	6833      	ldr	r3, [r6, #0]
 8001b90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b94:	d006      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5a4>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe ff25 	bl	80009e4 <HAL_GetTick>
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9f6      	bls.n	8001b8e <HAL_RCC_OscConfig+0x58e>
                return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e05f      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001ba6:	68d1      	ldr	r1, [r2, #12]
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_RCC_OscConfig+0x678>)
 8001baa:	400b      	ands	r3, r1
 8001bac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bb8:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8001bbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bbe:	3901      	subs	r1, #1
 8001bc0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bc6:	0849      	lsrs	r1, r1, #1
 8001bc8:	3901      	subs	r1, #1
 8001bca:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001bd0:	0849      	lsrs	r1, r1, #1
 8001bd2:	3901      	subs	r1, #1
 8001bd4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001bd8:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be0:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be2:	68d3      	ldr	r3, [r2, #12]
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be8:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8001bea:	f7fe fefb 	bl	80009e4 <HAL_GetTick>
 8001bee:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4d20      	ldr	r5, [pc, #128]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001bf2:	682b      	ldr	r3, [r5, #0]
 8001bf4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bf8:	d106      	bne.n	8001c08 <HAL_RCC_OscConfig+0x608>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7fe fef3 	bl	80009e4 <HAL_GetTick>
 8001bfe:	1b00      	subs	r0, r0, r4
 8001c00:	2802      	cmp	r0, #2
 8001c02:	d9f6      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x5f2>
                return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
 8001c06:	e02d      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8001c08:	2000      	movs	r0, #0
 8001c0a:	e02b      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
          __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c14:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c1c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001c1e:	f7fe fee1 	bl	80009e4 <HAL_GetTick>
 8001c22:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c24:	4d13      	ldr	r5, [pc, #76]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x63c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe fed9 	bl	80009e4 <HAL_GetTick>
 8001c32:	1b03      	subs	r3, r0, r4
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d9f6      	bls.n	8001c26 <HAL_RCC_OscConfig+0x626>
              return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e011      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x674>)
 8001c42:	68d1      	ldr	r1, [r2, #12]
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RCC_OscConfig+0x67c>)
 8001c46:	400b      	ands	r3, r1
 8001c48:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
    return HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
}
 8001c50:	4770      	bx	lr
        return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
 8001c54:	e006      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
            return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	e004      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e002      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
  return HAL_OK;
 8001c62:	2000      	movs	r0, #0
}
 8001c64:	b003      	add	sp, #12
 8001c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e7fa      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
        return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e7f8      	b.n	8001c64 <HAL_RCC_OscConfig+0x664>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	019d808c 	.word	0x019d808c
 8001c7c:	feeefffc 	.word	0xfeeefffc

08001c80 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d076      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xf2>
{
 8001c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c88:	460d      	mov	r5, r1
 8001c8a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_ClockConfig+0x188>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d20a      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c98:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_RCC_ClockConfig+0x188>)
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	f023 0307 	bic.w	r3, r3, #7
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	428b      	cmp	r3, r1
 8001cac:	d163      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	f013 0f02 	tst.w	r3, #2
 8001cb4:	d065      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x102>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb6:	68a1      	ldr	r1, [r4, #8]
 8001cb8:	4a54      	ldr	r2, [pc, #336]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001cba:	6892      	ldr	r2, [r2, #8]
 8001cbc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001cc0:	4291      	cmp	r1, r2
 8001cc2:	f240 809c 	bls.w	8001dfe <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc6:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	f013 0f01 	tst.w	r3, #1
 8001cd8:	d039      	beq.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	6862      	ldr	r2, [r4, #4]
 8001cdc:	2a03      	cmp	r2, #3
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	2a02      	cmp	r2, #2
 8001ce2:	d026      	beq.n	8001d32 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ce4:	bb62      	cbnz	r2, 8001d40 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f013 0f02 	tst.w	r3, #2
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e082      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cfc:	d03d      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4943      	ldr	r1, [pc, #268]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001d00:	688b      	ldr	r3, [r1, #8]
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fe6b 	bl	80009e4 <HAL_GetTick>
 8001d0e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d10:	4f3e      	ldr	r7, [pc, #248]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f241 3888 	movw	r8, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	6862      	ldr	r2, [r4, #4]
 8001d1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d22:	d014      	beq.n	8001d4e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7fe fe5e 	bl	80009e4 <HAL_GetTick>
 8001d28:	1b80      	subs	r0, r0, r6
 8001d2a:	4540      	cmp	r0, r8
 8001d2c:	d9f3      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001d2e:	2003      	movs	r0, #3
 8001d30:	e063      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d3a:	d1e0      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	e05c      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d48:	d1d9      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e055      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f013 0f02 	tst.w	r3, #2
 8001d54:	d018      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x108>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d56:	68a2      	ldr	r2, [r4, #8]
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d211      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x108>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001d66:	688b      	ldr	r3, [r1, #8]
 8001d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	4770      	bx	lr
      return HAL_ERROR;
 8001d76:	2001      	movs	r0, #1
 8001d78:	e03f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
        return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	e03d      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e03b      	b.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	f013 0f01 	tst.w	r3, #1
 8001d86:	d1a8      	bne.n	8001cda <HAL_RCC_ClockConfig+0x5a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_RCC_ClockConfig+0x188>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	42ab      	cmp	r3, r5
 8001d92:	d90a      	bls.n	8001daa <HAL_RCC_ClockConfig+0x12a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_RCC_ClockConfig+0x188>)
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f023 0307 	bic.w	r3, r3, #7
 8001d9c:	432b      	orrs	r3, r5
 8001d9e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d1e9      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	f013 0f04 	tst.w	r3, #4
 8001db0:	d006      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001db4:	6893      	ldr	r3, [r2, #8]
 8001db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dba:	68e1      	ldr	r1, [r4, #12]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f013 0f08 	tst.w	r3, #8
 8001dc6:	d007      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x158>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001dca:	6893      	ldr	r3, [r2, #8]
 8001dcc:	6921      	ldr	r1, [r4, #16]
 8001dce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd8:	f7ff fbbe 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x18c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x190>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x194>)
 8001df0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x198>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f7fe fdab 	bl	8000950 <HAL_InitTick>
}
 8001dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	f013 0f01 	tst.w	r3, #1
 8001e02:	f47f af6a 	bne.w	8001cda <HAL_RCC_ClockConfig+0x5a>
 8001e06:	e7a6      	b.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080028dc 	.word	0x080028dc
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e2e:	6810      	ldr	r0, [r2, #0]
}
 8001e30:	40d8      	lsrs	r0, r3
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080028ec 	.word	0x080028ec
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e52:	6810      	ldr	r0, [r2, #0]
}
 8001e54:	40d8      	lsrs	r0, r3
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	080028ec 	.word	0x080028ec
 8001e60:	20000000 	.word	0x20000000

08001e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	4604      	mov	r4, r0
 8001e68:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e6a:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f013 0f03 	tst.w	r3, #3
 8001e72:	d014      	beq.n	8001e9e <RCCEx_PLLSAI1_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e74:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d001      	beq.n	8001e86 <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e013      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
       ||
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d079      	beq.n	8001f7e <RCCEx_PLLSAI1_Config+0x11a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e92:	3301      	adds	r3, #1
       ||
 8001e94:	6842      	ldr	r2, [r0, #4]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	e007      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001e9e:	6803      	ldr	r3, [r0, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d028      	beq.n	8001ef6 <RCCEx_PLLSAI1_Config+0x92>
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d02d      	beq.n	8001f04 <RCCEx_PLLSAI1_Config+0xa0>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <RCCEx_PLLSAI1_Config+0x4c>
 8001eac:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8001eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	f012 0f02 	tst.w	r2, #2
 8001eb8:	d063      	beq.n	8001f82 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001eba:	4840      	ldr	r0, [pc, #256]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001ebc:	68c2      	ldr	r2, [r0, #12]
 8001ebe:	6861      	ldr	r1, [r4, #4]
 8001ec0:	3901      	subs	r1, #1
 8001ec2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001ecc:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ece:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ed6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fd84 	bl	80009e4 <HAL_GetTick>
 8001edc:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ede:	4f37      	ldr	r7, [pc, #220]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001ee6:	d055      	beq.n	8001f94 <RCCEx_PLLSAI1_Config+0x130>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ee8:	f7fe fd7c 	bl	80009e4 <HAL_GetTick>
 8001eec:	1b43      	subs	r3, r0, r5
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d9f6      	bls.n	8001ee0 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	e7db      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001efe:	d1dc      	bne.n	8001eba <RCCEx_PLLSAI1_Config+0x56>
 8001f00:	2001      	movs	r0, #1
 8001f02:	e7d4      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f0c:	d1d5      	bne.n	8001eba <RCCEx_PLLSAI1_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f0e:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001f16:	d1d0      	bne.n	8001eba <RCCEx_PLLSAI1_Config+0x56>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	e7c8      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f1c:	4927      	ldr	r1, [pc, #156]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f1e:	690a      	ldr	r2, [r1, #16]
 8001f20:	68a0      	ldr	r0, [r4, #8]
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	06db      	lsls	r3, r3, #27
 8001f26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f2a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001f2e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f32:	4313      	orrs	r3, r2
 8001f34:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f40:	f7fe fd50 	bl	80009e4 <HAL_GetTick>
 8001f44:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f46:	4e1d      	ldr	r6, [pc, #116]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f4e:	d11a      	bne.n	8001f86 <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f50:	f7fe fd48 	bl	80009e4 <HAL_GetTick>
 8001f54:	1b43      	subs	r3, r0, r5
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d9f6      	bls.n	8001f48 <RCCEx_PLLSAI1_Config+0xe4>
          status = HAL_TIMEOUT;
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	e7a7      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f5e:	4917      	ldr	r1, [pc, #92]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f60:	690b      	ldr	r3, [r1, #16]
 8001f62:	6922      	ldr	r2, [r4, #16]
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	68a0      	ldr	r0, [r4, #8]
 8001f6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f76:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001f7a:	610b      	str	r3, [r1, #16]
 8001f7c:	e7db      	b.n	8001f36 <RCCEx_PLLSAI1_Config+0xd2>
      status = HAL_ERROR;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	e795      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
 8001f82:	2001      	movs	r0, #1
 8001f84:	e793      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f86:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f88:	6913      	ldr	r3, [r2, #16]
 8001f8a:	69a1      	ldr	r1, [r4, #24]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6113      	str	r3, [r2, #16]
 8001f90:	2000      	movs	r0, #0
  return status;
 8001f92:	e78c      	b.n	8001eae <RCCEx_PLLSAI1_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 8001f94:	2e00      	cmp	r6, #0
 8001f96:	d0c1      	beq.n	8001f1c <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f98:	2e01      	cmp	r6, #1
 8001f9a:	d0e0      	beq.n	8001f5e <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <RCCEx_PLLSAI1_Config+0x158>)
 8001f9e:	6902      	ldr	r2, [r0, #16]
 8001fa0:	6963      	ldr	r3, [r4, #20]
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	1e59      	subs	r1, r3, #1
 8001fa6:	68a5      	ldr	r5, [r4, #8]
 8001fa8:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8001fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fb0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001fb4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001fb8:	6103      	str	r3, [r0, #16]
 8001fba:	e7bc      	b.n	8001f36 <RCCEx_PLLSAI1_Config+0xd2>
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001fce:	d020      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fd0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fdc:	d007      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8001fde:	b18b      	cbz	r3, 8002004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fe0:	2601      	movs	r6, #1
 8001fe2:	e017      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fe4:	4ab6      	ldr	r2, [pc, #728]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fe6:	68d3      	ldr	r3, [r2, #12]
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fee:	4ab4      	ldr	r2, [pc, #720]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ff0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ff8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002000:	2600      	movs	r6, #0
 8002002:	e007      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x54>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002004:	2100      	movs	r1, #0
 8002006:	3004      	adds	r0, #4
 8002008:	f7ff ff2c 	bl	8001e64 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800200c:	4606      	mov	r6, r0
 800200e:	b908      	cbnz	r0, 8002014 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002010:	e7ed      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002012:	2600      	movs	r6, #0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800201a:	d029      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201c:	4ba8      	ldr	r3, [pc, #672]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002024:	f040 80fd 	bne.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800202a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800202c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800203c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203e:	4aa1      	ldr	r2, [pc, #644]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002048:	f7fe fccc 	bl	80009e4 <HAL_GetTick>
 800204c:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 80022c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002052:	f8d8 3000 	ldr.w	r3, [r8]
 8002056:	f413 7f80 	tst.w	r3, #256	; 0x100
 800205a:	f040 80e4 	bne.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x266>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe fcc1 	bl	80009e4 <HAL_GetTick>
 8002062:	1b40      	subs	r0, r0, r5
 8002064:	2802      	cmp	r0, #2
 8002066:	d9f4      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x92>
        ret = HAL_TIMEOUT;
 8002068:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 800206a:	2f00      	cmp	r7, #0
 800206c:	f040 8110 	bne.w	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	f013 0f01 	tst.w	r3, #1
 8002076:	d008      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002078:	4a91      	ldr	r2, [pc, #580]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800207a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	6a21      	ldr	r1, [r4, #32]
 8002084:	430b      	orrs	r3, r1
 8002086:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	f013 0f02 	tst.w	r3, #2
 8002090:	d008      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002092:	4a8b      	ldr	r2, [pc, #556]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002094:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002098:	f023 030c 	bic.w	r3, r3, #12
 800209c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800209e:	430b      	orrs	r3, r1
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f013 0f04 	tst.w	r3, #4
 80020aa:	d008      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ac:	4a84      	ldr	r2, [pc, #528]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80020b8:	430b      	orrs	r3, r1
 80020ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	f013 0f20 	tst.w	r3, #32
 80020c4:	d008      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020d2:	430b      	orrs	r3, r1
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80020de:	d008      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e0:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020e6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020ec:	430b      	orrs	r3, r1
 80020ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020f8:	d008      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020fa:	4a71      	ldr	r2, [pc, #452]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002100:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002104:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002106:	430b      	orrs	r3, r1
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002114:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002116:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800211a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002120:	430b      	orrs	r3, r1
 8002122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f013 0f80 	tst.w	r3, #128	; 0x80
 800212c:	d008      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800212e:	4a64      	ldr	r2, [pc, #400]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002130:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800213a:	430b      	orrs	r3, r1
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002146:	d008      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800214a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800214e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002152:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002154:	430b      	orrs	r3, r1
 8002156:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002160:	d011      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002162:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002164:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002168:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800216c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800216e:	430b      	orrs	r3, r1
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002174:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217a:	f000 808f 	beq.w	800229c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800217e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002182:	f000 8090 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800218c:	d011      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800218e:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002190:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002194:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002198:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800219a:	430b      	orrs	r3, r1
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a6:	f000 8086 	beq.w	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ae:	f000 808b 	beq.w	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80021b8:	d011      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021ba:	4a41      	ldr	r2, [pc, #260]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021c0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80021c6:	430b      	orrs	r3, r1
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80021ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d2:	f000 8081 	beq.w	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021da:	f000 8082 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x322>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80021e4:	d00c      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x240>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e6:	4a36      	ldr	r2, [pc, #216]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021f0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fe:	d078      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002206:	d008      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800220a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800220e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002212:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002214:	430b      	orrs	r3, r1
 8002216:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800221a:	4630      	mov	r0, r6
 800221c:	b003      	add	sp, #12
 800221e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2700      	movs	r7, #0
 8002224:	e70b      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    if(ret == HAL_OK)
 8002226:	2e00      	cmp	r6, #0
 8002228:	f47f af1f 	bne.w	800206a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002232:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002236:	d064      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002238:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800223a:	429a      	cmp	r2, r3
 800223c:	d012      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002240:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800224c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002250:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002258:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800225c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002264:	f013 0f01 	tst.w	r3, #1
 8002268:	d04b      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x342>
        tickstart = HAL_GetTick();
 800226a:	f7fe fbbb 	bl	80009e4 <HAL_GetTick>
 800226e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002270:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f241 3988 	movw	r9, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002278:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800227c:	f013 0f02 	tst.w	r3, #2
 8002280:	d13f      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x342>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fbaf 	bl	80009e4 <HAL_GetTick>
 8002286:	1b40      	subs	r0, r0, r5
 8002288:	4548      	cmp	r0, r9
 800228a:	d9f5      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
            ret = HAL_TIMEOUT;
 800228c:	2603      	movs	r6, #3
 800228e:	e6ec      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002292:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
 800229a:	e6e9      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	68d3      	ldr	r3, [r2, #12]
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
 80022a4:	e76f      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a6:	2101      	movs	r1, #1
 80022a8:	1d20      	adds	r0, r4, #4
 80022aa:	f7ff fddb 	bl	8001e64 <RCCEx_PLLSAI1_Config>
          status = ret;
 80022ae:	2800      	cmp	r0, #0
 80022b0:	bf18      	it	ne
 80022b2:	4606      	movne	r6, r0
 80022b4:	e767      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b6:	68d3      	ldr	r3, [r2, #12]
 80022b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022bc:	60d3      	str	r3, [r2, #12]
 80022be:	e778      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c8:	2101      	movs	r1, #1
 80022ca:	1d20      	adds	r0, r4, #4
 80022cc:	f7ff fdca 	bl	8001e64 <RCCEx_PLLSAI1_Config>
        status = ret;
 80022d0:	2800      	cmp	r0, #0
 80022d2:	bf18      	it	ne
 80022d4:	4606      	movne	r6, r0
 80022d6:	e76c      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	68d3      	ldr	r3, [r2, #12]
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
 80022e0:	e77d      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e2:	2101      	movs	r1, #1
 80022e4:	1d20      	adds	r0, r4, #4
 80022e6:	f7ff fdbd 	bl	8001e64 <RCCEx_PLLSAI1_Config>
        status = ret;
 80022ea:	2800      	cmp	r0, #0
 80022ec:	bf18      	it	ne
 80022ee:	4606      	movne	r6, r0
 80022f0:	e775      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022f2:	2102      	movs	r1, #2
 80022f4:	1d20      	adds	r0, r4, #4
 80022f6:	f7ff fdb5 	bl	8001e64 <RCCEx_PLLSAI1_Config>
        status = ret;
 80022fa:	2800      	cmp	r0, #0
 80022fc:	bf18      	it	ne
 80022fe:	4606      	movne	r6, r0
 8002300:	e77e      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002304:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800230e:	430b      	orrs	r3, r1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002314:	e6a9      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002320:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002322:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002324:	68a3      	ldr	r3, [r4, #8]
 8002326:	6922      	ldr	r2, [r4, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	6962      	ldr	r2, [r4, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	69e2      	ldr	r2, [r4, #28]
 8002330:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002332:	4aa2      	ldr	r2, [pc, #648]	; (80025bc <UART_SetConfig+0x2a0>)
 8002334:	4002      	ands	r2, r0
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233a:	6822      	ldr	r2, [r4, #0]
 800233c:	6853      	ldr	r3, [r2, #4]
 800233e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002342:	68e1      	ldr	r1, [r4, #12]
 8002344:	430b      	orrs	r3, r1
 8002346:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002348:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	4b9c      	ldr	r3, [pc, #624]	; (80025c0 <UART_SetConfig+0x2a4>)
 800234e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002350:	bf1c      	itt	ne
 8002352:	6a23      	ldrne	r3, [r4, #32]
 8002354:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002356:	6893      	ldr	r3, [r2, #8]
 8002358:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	4a98      	ldr	r2, [pc, #608]	; (80025c4 <UART_SetConfig+0x2a8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d01c      	beq.n	80023a2 <UART_SetConfig+0x86>
 8002368:	4a97      	ldr	r2, [pc, #604]	; (80025c8 <UART_SetConfig+0x2ac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <UART_SetConfig+0xaa>
 800236e:	4a97      	ldr	r2, [pc, #604]	; (80025cc <UART_SetConfig+0x2b0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d045      	beq.n	8002400 <UART_SetConfig+0xe4>
 8002374:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <UART_SetConfig+0x2a4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d057      	beq.n	800242a <UART_SetConfig+0x10e>
 800237a:	2210      	movs	r2, #16
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800237c:	69e0      	ldr	r0, [r4, #28]
 800237e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002382:	f000 80b8 	beq.w	80024f6 <UART_SetConfig+0x1da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002386:	2a08      	cmp	r2, #8
 8002388:	f200 810f 	bhi.w	80025aa <UART_SetConfig+0x28e>
 800238c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002390:	00f700e1 	.word	0x00f700e1
 8002394:	010d00fd 	.word	0x010d00fd
 8002398:	010d00fa 	.word	0x010d00fa
 800239c:	010d010d 	.word	0x010d010d
 80023a0:	00de      	.short	0x00de
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023a2:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80023a6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	2a03      	cmp	r2, #3
 80023b0:	d807      	bhi.n	80023c2 <UART_SetConfig+0xa6>
 80023b2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023b6:	0073      	.short	0x0073
 80023b8:	01000004 	.word	0x01000004
 80023bc:	0113      	.short	0x0113
 80023be:	2204      	movs	r2, #4
 80023c0:	e7dc      	b.n	800237c <UART_SetConfig+0x60>
 80023c2:	2210      	movs	r2, #16
 80023c4:	e7da      	b.n	800237c <UART_SetConfig+0x60>
 80023c6:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80023ca:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80023ce:	f002 020c 	and.w	r2, r2, #12
 80023d2:	2a0c      	cmp	r2, #12
 80023d4:	d812      	bhi.n	80023fc <UART_SetConfig+0xe0>
 80023d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023da:	007d      	.short	0x007d
 80023dc:	00110011 	.word	0x00110011
 80023e0:	000d0011 	.word	0x000d0011
 80023e4:	00110011 	.word	0x00110011
 80023e8:	01030011 	.word	0x01030011
 80023ec:	00110011 	.word	0x00110011
 80023f0:	000f0011 	.word	0x000f0011
 80023f4:	2204      	movs	r2, #4
 80023f6:	e7c1      	b.n	800237c <UART_SetConfig+0x60>
 80023f8:	2208      	movs	r2, #8
 80023fa:	e7bf      	b.n	800237c <UART_SetConfig+0x60>
 80023fc:	2210      	movs	r2, #16
 80023fe:	e7bd      	b.n	800237c <UART_SetConfig+0x60>
 8002400:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <UART_SetConfig+0x2b4>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800240a:	2b20      	cmp	r3, #32
 800240c:	f000 80ea 	beq.w	80025e4 <UART_SetConfig+0x2c8>
 8002410:	d806      	bhi.n	8002420 <UART_SetConfig+0x104>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06d      	beq.n	80024f2 <UART_SetConfig+0x1d6>
 8002416:	2b10      	cmp	r3, #16
 8002418:	bf14      	ite	ne
 800241a:	2210      	movne	r2, #16
 800241c:	2204      	moveq	r2, #4
 800241e:	e7ad      	b.n	800237c <UART_SetConfig+0x60>
 8002420:	2b30      	cmp	r3, #48	; 0x30
 8002422:	bf14      	ite	ne
 8002424:	2210      	movne	r2, #16
 8002426:	2208      	moveq	r2, #8
 8002428:	e7a8      	b.n	800237c <UART_SetConfig+0x60>
 800242a:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <UART_SetConfig+0x2b4>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002438:	d056      	beq.n	80024e8 <UART_SetConfig+0x1cc>
 800243a:	d80a      	bhi.n	8002452 <UART_SetConfig+0x136>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d04d      	beq.n	80024dc <UART_SetConfig+0x1c0>
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	bf18      	it	ne
 8002446:	2001      	movne	r0, #1
 8002448:	f040 8095 	bne.w	8002576 <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetSysClockFreq();
 800244c:	f7ff f884 	bl	8001558 <HAL_RCC_GetSysClockFreq>
        break;
 8002450:	e046      	b.n	80024e0 <UART_SetConfig+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002456:	d11f      	bne.n	8002498 <UART_SetConfig+0x17c>
        pclk = (uint32_t) LSE_VALUE;
 8002458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800245c:	6862      	ldr	r2, [r4, #4]
 800245e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002462:	4283      	cmp	r3, r0
 8002464:	f200 8095 	bhi.w	8002592 <UART_SetConfig+0x276>
 8002468:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800246c:	f200 8093 	bhi.w	8002596 <UART_SetConfig+0x27a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002470:	0e01      	lsrs	r1, r0, #24
 8002472:	0200      	lsls	r0, r0, #8
 8002474:	0853      	lsrs	r3, r2, #1
 8002476:	18c0      	adds	r0, r0, r3
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	f141 0100 	adc.w	r1, r1, #0
 8002480:	f7fd fea4 	bl	80001cc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002484:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002488:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <UART_SetConfig+0x2b8>)
 800248a:	429a      	cmp	r2, r3
 800248c:	f200 8085 	bhi.w	800259a <UART_SetConfig+0x27e>
          huart->Instance->BRR = usartdiv;
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	60d8      	str	r0, [r3, #12]
 8002494:	2000      	movs	r0, #0
 8002496:	e06e      	b.n	8002576 <UART_SetConfig+0x25a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002498:	2001      	movs	r0, #1
 800249a:	e06c      	b.n	8002576 <UART_SetConfig+0x25a>
 800249c:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800249e:	4948      	ldr	r1, [pc, #288]	; (80025c0 <UART_SetConfig+0x2a4>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	f47f af6b 	bne.w	800237c <UART_SetConfig+0x60>
    switch (clocksource)
 80024a6:	2a08      	cmp	r2, #8
 80024a8:	d871      	bhi.n	800258e <UART_SetConfig+0x272>
 80024aa:	a301      	add	r3, pc, #4	; (adr r3, 80024b0 <UART_SetConfig+0x194>)
 80024ac:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80024b0:	080024dd 	.word	0x080024dd
 80024b4:	0800258f 	.word	0x0800258f
 80024b8:	080024d9 	.word	0x080024d9
 80024bc:	0800258f 	.word	0x0800258f
 80024c0:	0800244d 	.word	0x0800244d
 80024c4:	0800258f 	.word	0x0800258f
 80024c8:	0800258f 	.word	0x0800258f
 80024cc:	0800258f 	.word	0x0800258f
 80024d0:	080024ed 	.word	0x080024ed
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d4:	2200      	movs	r2, #0
 80024d6:	e7e2      	b.n	800249e <UART_SetConfig+0x182>
    switch (clocksource)
 80024d8:	483f      	ldr	r0, [pc, #252]	; (80025d8 <UART_SetConfig+0x2bc>)
 80024da:	e7bf      	b.n	800245c <UART_SetConfig+0x140>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024dc:	f7ff fc9e 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d1bb      	bne.n	800245c <UART_SetConfig+0x140>
 80024e4:	2000      	movs	r0, #0
 80024e6:	e046      	b.n	8002576 <UART_SetConfig+0x25a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024e8:	483b      	ldr	r0, [pc, #236]	; (80025d8 <UART_SetConfig+0x2bc>)
 80024ea:	e7b7      	b.n	800245c <UART_SetConfig+0x140>
        pclk = (uint32_t) LSE_VALUE;
 80024ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024f0:	e7b4      	b.n	800245c <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f2:	2200      	movs	r2, #0
 80024f4:	e742      	b.n	800237c <UART_SetConfig+0x60>
    switch (clocksource)
 80024f6:	2a08      	cmp	r2, #8
 80024f8:	d851      	bhi.n	800259e <UART_SetConfig+0x282>
 80024fa:	e8df f002 	tbb	[pc, r2]
 80024fe:	1f05      	.short	0x1f05
 8002500:	50225025 	.word	0x50225025
 8002504:	5050      	.short	0x5050
 8002506:	09          	.byte	0x09
 8002507:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002508:	f7ff fc88 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800250c:	2800      	cmp	r0, #0
 800250e:	d048      	beq.n	80025a2 <UART_SetConfig+0x286>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	0853      	lsrs	r3, r2, #1
 8002514:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002518:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800251c:	f1a0 0210 	sub.w	r2, r0, #16
 8002520:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002524:	429a      	cmp	r2, r3
 8002526:	d83e      	bhi.n	80025a6 <UART_SetConfig+0x28a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002528:	f020 030f 	bic.w	r3, r0, #15
 800252c:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800252e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002530:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002534:	4318      	orrs	r0, r3
 8002536:	60d0      	str	r0, [r2, #12]
 8002538:	2000      	movs	r0, #0
 800253a:	e01c      	b.n	8002576 <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800253c:	f7ff fc80 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
        break;
 8002540:	e7e4      	b.n	800250c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002542:	f7ff f809 	bl	8001558 <HAL_RCC_GetSysClockFreq>
        break;
 8002546:	e7e1      	b.n	800250c <UART_SetConfig+0x1f0>
        pclk = (uint32_t) HSI_VALUE;
 8002548:	4823      	ldr	r0, [pc, #140]	; (80025d8 <UART_SetConfig+0x2bc>)
 800254a:	e7e1      	b.n	8002510 <UART_SetConfig+0x1f4>
    switch (clocksource)
 800254c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002550:	e002      	b.n	8002558 <UART_SetConfig+0x23c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002552:	f7ff fc63 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002556:	b350      	cbz	r0, 80025ae <UART_SetConfig+0x292>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800255e:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002562:	f1a0 0210 	sub.w	r2, r0, #16
 8002566:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800256a:	429a      	cmp	r2, r3
 800256c:	d821      	bhi.n	80025b2 <UART_SetConfig+0x296>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	b280      	uxth	r0, r0
 8002572:	60d8      	str	r0, [r3, #12]
 8002574:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800257a:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 800257c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800257e:	f7ff fc5f 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
        break;
 8002582:	e7e8      	b.n	8002556 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002584:	f7fe ffe8 	bl	8001558 <HAL_RCC_GetSysClockFreq>
        break;
 8002588:	e7e5      	b.n	8002556 <UART_SetConfig+0x23a>
        pclk = (uint32_t) HSI_VALUE;
 800258a:	4813      	ldr	r0, [pc, #76]	; (80025d8 <UART_SetConfig+0x2bc>)
 800258c:	e7e4      	b.n	8002558 <UART_SetConfig+0x23c>
    switch (clocksource)
 800258e:	2001      	movs	r0, #1
 8002590:	e7f1      	b.n	8002576 <UART_SetConfig+0x25a>
        ret = HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e7ef      	b.n	8002576 <UART_SetConfig+0x25a>
 8002596:	2001      	movs	r0, #1
 8002598:	e7ed      	b.n	8002576 <UART_SetConfig+0x25a>
          ret = HAL_ERROR;
 800259a:	2001      	movs	r0, #1
 800259c:	e7eb      	b.n	8002576 <UART_SetConfig+0x25a>
    switch (clocksource)
 800259e:	2001      	movs	r0, #1
 80025a0:	e7e9      	b.n	8002576 <UART_SetConfig+0x25a>
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7e7      	b.n	8002576 <UART_SetConfig+0x25a>
        ret = HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
 80025a8:	e7e5      	b.n	8002576 <UART_SetConfig+0x25a>
    switch (clocksource)
 80025aa:	2001      	movs	r0, #1
 80025ac:	e7e3      	b.n	8002576 <UART_SetConfig+0x25a>
 80025ae:	2000      	movs	r0, #0
 80025b0:	e7e1      	b.n	8002576 <UART_SetConfig+0x25a>
        ret = HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e7df      	b.n	8002576 <UART_SetConfig+0x25a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b6:	2202      	movs	r2, #2
 80025b8:	e6e0      	b.n	800237c <UART_SetConfig+0x60>
 80025ba:	bf00      	nop
 80025bc:	efff69f3 	.word	0xefff69f3
 80025c0:	40008000 	.word	0x40008000
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40004800 	.word	0x40004800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	000ffcff 	.word	0x000ffcff
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	2208      	movs	r2, #8
 80025de:	e6cd      	b.n	800237c <UART_SetConfig+0x60>
 80025e0:	2202      	movs	r2, #2
 80025e2:	e6cb      	b.n	800237c <UART_SetConfig+0x60>
 80025e4:	2202      	movs	r2, #2
 80025e6:	e6c9      	b.n	800237c <UART_SetConfig+0x60>

080025e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ea:	f013 0f01 	tst.w	r3, #1
 80025ee:	d006      	beq.n	80025fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025f0:	6802      	ldr	r2, [r0, #0]
 80025f2:	6853      	ldr	r3, [r2, #4]
 80025f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80025fa:	430b      	orrs	r3, r1
 80025fc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002600:	f013 0f02 	tst.w	r3, #2
 8002604:	d006      	beq.n	8002614 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002606:	6802      	ldr	r2, [r0, #0]
 8002608:	6853      	ldr	r3, [r2, #4]
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002610:	430b      	orrs	r3, r1
 8002612:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002614:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002616:	f013 0f04 	tst.w	r3, #4
 800261a:	d006      	beq.n	800262a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800261c:	6802      	ldr	r2, [r0, #0]
 800261e:	6853      	ldr	r3, [r2, #4]
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002626:	430b      	orrs	r3, r1
 8002628:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800262a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800262c:	f013 0f08 	tst.w	r3, #8
 8002630:	d006      	beq.n	8002640 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	6853      	ldr	r3, [r2, #4]
 8002636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800263a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800263c:	430b      	orrs	r3, r1
 800263e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002642:	f013 0f10 	tst.w	r3, #16
 8002646:	d006      	beq.n	8002656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002648:	6802      	ldr	r2, [r0, #0]
 800264a:	6893      	ldr	r3, [r2, #8]
 800264c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002650:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002652:	430b      	orrs	r3, r1
 8002654:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002656:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002658:	f013 0f20 	tst.w	r3, #32
 800265c:	d006      	beq.n	800266c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800265e:	6802      	ldr	r2, [r0, #0]
 8002660:	6893      	ldr	r3, [r2, #8]
 8002662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002666:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800266c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800266e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002672:	d00a      	beq.n	800268a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002674:	6802      	ldr	r2, [r0, #0]
 8002676:	6853      	ldr	r3, [r2, #4]
 8002678:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800267c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800267e:	430b      	orrs	r3, r1
 8002680:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002682:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002688:	d00b      	beq.n	80026a2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800268a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800268c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002690:	d006      	beq.n	80026a0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002692:	6802      	ldr	r2, [r0, #0]
 8002694:	6853      	ldr	r3, [r2, #4]
 8002696:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800269a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800269c:	430b      	orrs	r3, r1
 800269e:	6053      	str	r3, [r2, #4]
  }
}
 80026a0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	6853      	ldr	r3, [r2, #4]
 80026a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6053      	str	r3, [r2, #4]
 80026b0:	e7eb      	b.n	800268a <UART_AdvFeatureConfig+0xa2>

080026b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026b6:	4680      	mov	r8, r0
 80026b8:	460e      	mov	r6, r1
 80026ba:	4615      	mov	r5, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c0:	f8d8 2000 	ldr.w	r2, [r8]
 80026c4:	69d4      	ldr	r4, [r2, #28]
 80026c6:	ea36 0304 	bics.w	r3, r6, r4
 80026ca:	bf0c      	ite	eq
 80026cc:	f04f 0c01 	moveq.w	ip, #1
 80026d0:	f04f 0c00 	movne.w	ip, #0
 80026d4:	45ac      	cmp	ip, r5
 80026d6:	d15a      	bne.n	800278e <UART_WaitOnFlagUntilTimeout+0xdc>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80026dc:	d0f2      	beq.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7fe f981 	bl	80009e4 <HAL_GetTick>
 80026e2:	eba0 0009 	sub.w	r0, r0, r9
 80026e6:	42b8      	cmp	r0, r7
 80026e8:	d830      	bhi.n	800274c <UART_WaitOnFlagUntilTimeout+0x9a>
 80026ea:	b37f      	cbz	r7, 800274c <UART_WaitOnFlagUntilTimeout+0x9a>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026ec:	f8d8 3000 	ldr.w	r3, [r8]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f012 0f04 	tst.w	r2, #4
 80026f6:	d0e3      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80026fe:	d0df      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002704:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002706:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	e852 3f00 	ldrex	r3, [r2]
 800270e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	e842 3100 	strex	r1, r3, [r2]
 8002716:	2900      	cmp	r1, #0
 8002718:	d1f5      	bne.n	8002706 <UART_WaitOnFlagUntilTimeout+0x54>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271e:	f102 0308 	add.w	r3, r2, #8
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	3208      	adds	r2, #8
 800272c:	e842 3100 	strex	r1, r3, [r2]
 8002730:	2900      	cmp	r1, #0
 8002732:	d1f2      	bne.n	800271a <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8002734:	2320      	movs	r3, #32
 8002736:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800273a:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800273e:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002742:	2300      	movs	r3, #0
 8002744:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74

          return HAL_TIMEOUT;
 8002748:	2003      	movs	r0, #3
 800274a:	e021      	b.n	8002790 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800274c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	e852 3f00 	ldrex	r3, [r2]
 8002754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	e842 3100 	strex	r1, r3, [r2]
 800275c:	2900      	cmp	r1, #0
 800275e:	d1f5      	bne.n	800274c <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	f102 0308 	add.w	r3, r2, #8
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	3208      	adds	r2, #8
 8002772:	e842 3100 	strex	r1, r3, [r2]
 8002776:	2900      	cmp	r1, #0
 8002778:	d1f2      	bne.n	8002760 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 800277a:	2320      	movs	r3, #32
 800277c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002780:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002784:	2300      	movs	r3, #0
 8002786:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 800278a:	2003      	movs	r0, #3
 800278c:	e000      	b.n	8002790 <UART_WaitOnFlagUntilTimeout+0xde>
        }
      }
    }
  }
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002794 <UART_CheckIdleState>:
{
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80027a0:	f7fe f920 	bl	80009e4 <HAL_GetTick>
 80027a4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	f012 0f08 	tst.w	r2, #8
 80027ae:	d10d      	bne.n	80027cc <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f013 0f04 	tst.w	r3, #4
 80027b8:	d116      	bne.n	80027e8 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80027ba:	2320      	movs	r3, #32
 80027bc:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027be:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c0:	2000      	movs	r0, #0
 80027c2:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80027c4:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 80027c8:	b003      	add	sp, #12
 80027ca:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4603      	mov	r3, r0
 80027d4:	2200      	movs	r2, #0
 80027d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ff69 	bl	80026b2 <UART_WaitOnFlagUntilTimeout>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d0e5      	beq.n	80027b0 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80027e4:	2003      	movs	r0, #3
 80027e6:	e7ef      	b.n	80027c8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	462b      	mov	r3, r5
 80027f0:	2200      	movs	r2, #0
 80027f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff ff5b 	bl	80026b2 <UART_WaitOnFlagUntilTimeout>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d0dc      	beq.n	80027ba <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8002800:	2003      	movs	r0, #3
 8002802:	e7e1      	b.n	80027c8 <UART_CheckIdleState+0x34>

08002804 <HAL_UART_Init>:
  if (huart == NULL)
 8002804:	b368      	cbz	r0, 8002862 <HAL_UART_Init+0x5e>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800280c:	b303      	cbz	r3, 8002850 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800280e:	2324      	movs	r3, #36	; 0x24
 8002810:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fd7d 	bl	800231c <UART_SetConfig>
 8002822:	2801      	cmp	r0, #1
 8002824:	d013      	beq.n	800284e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002828:	b9bb      	cbnz	r3, 800285a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	6853      	ldr	r3, [r2, #4]
 800282e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002832:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	6893      	ldr	r3, [r2, #8]
 8002838:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800283c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff ffa3 	bl	8002794 <UART_CheckIdleState>
}
 800284e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002850:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002854:	f7fe f80e 	bl	8000874 <HAL_UART_MspInit>
 8002858:	e7d9      	b.n	800280e <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff fec4 	bl	80025e8 <UART_AdvFeatureConfig>
 8002860:	e7e3      	b.n	800282a <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
}
 8002864:	4770      	bx	lr
	...

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4d0d      	ldr	r5, [pc, #52]	; (80028a0 <__libc_init_array+0x38>)
 800286c:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 800286e:	1b64      	subs	r4, r4, r5
 8002870:	10a4      	asrs	r4, r4, #2
 8002872:	2600      	movs	r6, #0
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	4d0b      	ldr	r5, [pc, #44]	; (80028a8 <__libc_init_array+0x40>)
 800287a:	4c0c      	ldr	r4, [pc, #48]	; (80028ac <__libc_init_array+0x44>)
 800287c:	f000 f820 	bl	80028c0 <_init>
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	2600      	movs	r6, #0
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	0800292c 	.word	0x0800292c
 80028a4:	0800292c 	.word	0x0800292c
 80028a8:	0800292c 	.word	0x0800292c
 80028ac:	08002930 	.word	0x08002930

080028b0 <memset>:
 80028b0:	4402      	add	r2, r0
 80028b2:	4603      	mov	r3, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr

/*
 *******************************************************************************
 * MIT License
 *
 * Copyright (c) 2023 Jerryl James
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *******************************************************************************
 */

#include "mcp401x.h"

extern I2C_HandleTypeDef hi2c1;


/**
  * @brief  Set step value. Range 0 - 127
  * @retval None
  */
void SetStep(uint8_t *step)
{
	HAL_I2C_Master_Transmit(&hi2c1, MCP401XADDR, step, 1, HAL_MAX_DELAY);
}

/**
  * @brief  Read step value. Range 0 - 127
  * @retval int
  */
int ReadStep(void)
{
	uint8_t tempBuf[1] = {0};
	HAL_I2C_Master_Receive(&hi2c1, MCP401XADDR, tempBuf, 1, HAL_MAX_DELAY);
	return *tempBuf;
}

/**
  * @brief  Set Resistance value, Rwb.
  * @retval None
  */
void SetResistance(uint32_t Rwb)
{
	float temp = (float) (((MAXSTEP * Rwb) / MAXRESISTANCE) + (Rwb / 1000));
	uint8_t step = temp;
	if(step > 127)
	{
		step = 127;
	}
	SetStep(&step);
}

/**
  * @brief  Read Resistance value, Rwb.
  * @retval int
  */
int ReadResistance(void)
{
	uint8_t step = ReadStep();
	uint32_t Rwb = (1000 * MAXRESISTANCE * step ) / ((1000 * MAXSTEP) + MAXRESISTANCE);
	return Rwb;
}


